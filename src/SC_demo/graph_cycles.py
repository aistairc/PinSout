import Point_sort as rs
import Point_sort2 as rs2
import networkx as nx
import matplotlib.pyplot as plt
from functools import reduce
import operator
import math
# import src.citygml.PointCloud_To_CityGML as gml
import numpy as np

class MakingGraph:

    def __init__(self, surface_list):

        self.new_line_info = []
        self.new_line_info2 = []
        self.surface_info = surface_list
        self.r_s = rs.Point_sort()
        self.atomic_lines = []
        self.atomic_lines2 = []

    def make_line_info(self):

        for each_room in self.surface_info:

            for each_wall in each_room:
                merge_line_info = []
                merge_line_info2 = []
                each_line_info = []
                each_line_info2 = []
                for wall_point in each_wall:

                    # if wall_point[:2] not in merge_line_info:
                    #     merge_line_info.append(wall_point[:2])
                    if wall_point[0][:2] not in merge_line_info:
                        merge_line_info.append(wall_point[0][:2])
                        merge_line_info2.append(wall_point)

                if len(merge_line_info) != 0:

                    # center = tuple(
                    #     map(operator.truediv, reduce(lambda x, y: map(operator.add, x, y), merge_line_info), [len(merge_line_info)] * 2))
                    # sorted_new_line_info = (sorted(merge_line_info, key=lambda coord: (-135 - math.degrees(
                    #     math.atan2(*tuple(map(operator.sub, coord, center))[::-1]))) % 360))
                    sorted_new_line_info, sorted_index = self.sorted2Dpoints(merge_line_info)
                    # if len(sorted_new_line_info) == 3:
                    #     sorted_new_line_info = self.remove_index(sorted_new_line_info)

                    for sorted_i in range(len(sorted_new_line_info) - 1):
                        temp_list = []
                        temp_list2 = []
                        n = sorted_new_line_info[sorted_i]
                        n_1 = sorted_new_line_info[sorted_i + 1]
                        t = merge_line_info2[sorted_index[sorted_i]]
                        t_1 = merge_line_info2[sorted_index[sorted_i + 1]]
                        if n != n_1:
                            temp_list.append(n)
                            temp_list.append(n_1)
                            temp_list2.append(t)
                            temp_list2.append(t_1)

                            each_line_info.append(temp_list)
                            each_line_info2.append(temp_list2)

                    # print "result : ", len(sorted_new_line_info), len(each_line_info)
                    if len(sorted_new_line_info) > 3 and len(sorted_new_line_info) % 2 == 0:
                        self.new_line_info.extend(self.remove_index(each_line_info))
                        self.new_line_info2.extend(self.remove_index(each_line_info2))
                    else:
                        self.new_line_info.extend(each_line_info)
                        self.new_line_info2.extend(each_line_info2)
                    # if len(each_wall) == 3:
                    #     print each_wall
                    #     print sorted_new_line_info
                    #     print

    def remove_index(self, each_line_info):
        new_line_info = []
        for i in range(len(each_line_info)):
            if i % 2 != 1:
                new_line_info.append(each_line_info[i])
        return new_line_info

    def remove_index2(self, sorted_new_line):

        a = np.asarray(sorted_new_line[0])
        b = np.asarray(sorted_new_line[1])
        c = np.asarray(sorted_new_line[2])

        d1 = a-b
        d2 = b-c

        r1 = math.pow(d1[0], 2) + math.pow(d1[1], 2)
        r2 = math.pow(d2[0], 2) + math.pow(d2[1], 2)
        if r1 > r2:
            return sorted_new_line[:2]
        else:
            return sorted_new_line[-2:]

    def make_edge_info(self):

        all_lines = reduce(lambda x, y: x+y,self.new_line_info)
        all_lines2 = reduce(lambda x, y: x+y,self.new_line_info2)
        # self.atomic_lines = list(set(map(tuple, all_lines)))

        # for each_line in all_lines:
        #     if each_line not in self.atomic_lines:
        #         self.atomic_lines.append(each_line)
        for each_l in range(len(all_lines)):
            if all_lines[each_l] not in self.atomic_lines:
                self.atomic_lines.append(all_lines[each_l])
                self.atomic_lines2.append(all_lines2[each_l])


        used_l = []
        wall_graph = []
        for atomic_i in range(len(self.atomic_lines)):
            atomic_v = [self.atomic_lines[atomic_i][0], self.atomic_lines[atomic_i][1]]

            for l in range(len(self.new_line_info)):
                if l not in used_l:
                    if atomic_v in self.new_line_info[l]:
                        index = self.new_line_info[l].index(atomic_v)

                        if index == 0:
                            v_i = self.atomic_lines.index(self.new_line_info[l][1])
                            # v_i = self.atomic_lines.index(tuple(self.new_line_info[l][1]))
                            wall_graph.append([atomic_i, v_i])
                        else:
                            v_i = self.atomic_lines.index(self.new_line_info[l][0])
                            # v_i = self.atomic_lines.index(tuple(self.new_line_info[l][0]))
                            wall_graph.append([v_i, atomic_i])
                        # print atomic_i,  v_i, self.new_line_info[l]
                        used_l.append(l)

        # self.r_s.visual_graph2(self.atomic_lines)
        return used_l, wall_graph

    def make_first_graph(self):
        self.make_line_info()
        used_l, wall_graph = self.make_edge_info()
        # print wall_graph, used_l
        G = nx.Graph()
        G.add_edges_from(wall_graph)
        nx.draw(G)
        # plt.show()
        cycles_list = nx.minimum_cycle_basis(G)
        print "minimum_cycle_basis"
        # print cycles_list
        new_cycles = []
        for i in cycles_list:
            a = []
            for a_i in i:
                a.append([self.atomic_lines[a_i][0],self.atomic_lines[a_i][1]])
            # self.r_s.visual_graph2(self.r_s.SortPointsClockwise2(a, True))

        if len(cycles_list) > 1:
            delete_edges = []
            temp_delete = []

            for each_cycle in cycles_list:
                for each_cycle_i in range(len(each_cycle) - 1):
                    for wall_node in wall_graph:
                        if each_cycle[each_cycle_i] in wall_node:
                            index_node = wall_node.index(each_cycle[each_cycle_i])
                            for each_cycle_j in range(each_cycle_i + 1, len(each_cycle)):
                                if each_cycle[each_cycle_j] in wall_node:
                                    if index_node == 0:
                                        temp_edge = [each_cycle[each_cycle_i], each_cycle[each_cycle_j]]
                                    else:
                                        temp_edge = [each_cycle[each_cycle_j], each_cycle[each_cycle_i]]

                                    temp_delete.append(temp_edge)
            delete_dup_edges = list(set(map(tuple, temp_delete)))

            for delete_edge in delete_dup_edges:
                if temp_delete.count([delete_edge[0], delete_edge[1]]) > 1:
                    delete_edges.append([delete_edge[0], delete_edge[1]])

            # print wall_graph
            print "delete_edges", delete_edges

            G.remove_edges_from(delete_edges)
            new_cycles = nx.minimum_cycle_basis(G)
            nx.draw(G)
            plt.show()
            # print new_cycles

        else:

            # if len(cycles_list) != 0 or len(cycles_list[0]) != 0:
            #     new_cycles = cycles_list
            if len(cycles_list) != 0:
                new_cycles = cycles_list

        test_point = []

        if len(new_cycles) != 0:
            print "make", len(new_cycles)
            for cycle_l in new_cycles:
                if len(cycle_l) > 1:
                    cycle_point_list = []

                    temp_list_l = []
                    for cycle_node in cycle_l:

                        for test_i in nx.edges(G, cycle_node):
                            temp_list_l.append([test_i[0], test_i[1]])

                        # cycle_point_list.append([self.atomic_lines[cycle_node][0], self.atomic_lines[cycle_node][1]])
                        # test_point.append([self.atomic_lines[cycle_node][0], self.atomic_lines[cycle_node][1]])
                        # test_point.append(self.atomic_lines2[cycle_node][0])
                        # test_point.append(self.atomic_lines2[cycle_node][1])
                    # print cycle_point_list
                    # print test_point

                    # self.r_s.visual_graph(rs2.CalculateCentroid2(cycle_point_list))
                    # print cycle_point_list
                    # print temp_list_l
                    used_index = []
                    for t_i in range(len(temp_list_l)-1):
                        for t_j in range(1+t_i, len(temp_list_l)):
                            if temp_list_l[t_i][0] in temp_list_l[t_j]:
                                if temp_list_l[t_i][1] in temp_list_l[t_j]:
                                    used_index.append(t_j)
                    # print used_index
                    new_list = []
                    for t_k in range(len(temp_list_l)):
                        if t_k not in used_index:
                            if temp_list_l[t_k][0] in cycle_l:
                                if temp_list_l[t_k][1] in cycle_l:
                                    new_list.append(temp_list_l[t_k])
                    # print new_list
                    # wall_point_list = []
                    start_node = new_list[0]
                    new_list.pop(0)
                    # first_check = True
                    # while True:

                    right = start_node[1]
                    left = start_node[0]
                    while True:
                        used_index = []
                        for i in new_list:
                            if right in i:
                                if i.index(right) == 0:
                                    right = i[1]
                                else:
                                    right = i[0]
                                start_node.append(right)
                                used_index.append(new_list.index(i))
                                continue
                            if left in i:
                                if i.index(left) == 0:
                                    left = i[1]
                                else:
                                    left = i[0]
                                start_node.insert(0, left)
                                used_index.append(new_list.index(i))
                                continue
                        new_list2 = []
                        if len(used_index) == len(new_list):
                            break
                        for j in range(len(new_list)):
                            if j not in used_index:
                                new_list2.append(new_list[j])
                        new_list = new_list2

                    result_point_list = []
                    ceiling_list = []
                    floor_list = []
                    wall_list = []
                    floor = []
                    ceiling = []
                    print start_node
                    for each_i in range(len(start_node)-1):
                        print each_i
                        wall = []
                        now_value = start_node[each_i]
                        next_value = start_node[each_i+1]
                        wall.append(self.atomic_lines2[now_value][0])
                        wall.append(self.atomic_lines2[next_value][0])
                        wall.append(self.atomic_lines2[now_value][1])
                        wall.append(self.atomic_lines2[next_value][1])
                        wall_list.append(rs2.CalculateCentroid(wall))



                        if self.atomic_lines2[now_value][1] not in ceiling:
                            ceiling.append(self.atomic_lines2[now_value][1])
                        if self.atomic_lines2[now_value][0] not in floor:
                            floor.append(self.atomic_lines2[now_value][0])



                        if each_i + 1 == len(start_node) - 1:

                            ceiling.append(self.atomic_lines2[next_value][1])
                            floor.append(self.atomic_lines2[next_value][0])


                    #
                    self.r_s.visual_graph(ceiling)
                    # ceiling_list.append(rs2.CalculateCentroid(ceiling))
                    # floor_list.append(rs2.CalculateCentroid(floor))
                    # make_gml_file2 = gml.PointCloudToCityGML(ceiling_list, floor_list, wall_list, [], [])
                    # make_gml_file2.MakeRoomObject()

                    #
                    # # print start_node
                    #

                    # for each_point in start_node:
                    #
                    #     ceiling.append([self.atomic_lines[each_point][0], self.atomic_lines[each_point][1], 3.0])
                    #     floor.append([self.atomic_lines[each_point][0], self.atomic_lines[each_point][1], 0.0])
                    #     # self.r_s.visual_graph2(ceiling)
                    # for each_i in range(len(ceiling) -1):
                    #     each_wall = []
                    #     each_wall.append(ceiling[each_i])
                    #     each_wall.append(floor[each_i])
                    #     each_wall.append(floor[each_i + 1])
                    #     each_wall.append(ceiling[each_i + 1])
                    #     each_wall.append(ceiling[each_i])
                    #     wall.append(each_wall)
                    #     # self.r_s.visual_graph(each_wall)
                    # make_gml_file2 = gml.PointCloudToCityGML([ceiling], [floor], wall, [], [])
                    # make_gml_file2.MakeRoomObject()

    def sorted2Dpoints(self, point_list):
        max = -1.0
        index = []
        sorted_list = []
        sorted_index = []
        index_list = [i for i in range(len(point_list))]


        for i in range(len(point_list) - 1):
            for j in range(1, len(point_list)):
                distance = math.sqrt(
                    ((point_list[i][0] - point_list[j][0]) ** 2) + ((point_list[i][1] - point_list[j][1]) ** 2))
                if distance > max:
                    max = distance
                    index = []
                    index.append(i)
                    index.append(j)

        value0 = point_list[index[0]]
        value1 = point_list[index[1]]
        if index[0] < index[1]:
            point_list.pop(index[0])
            point_list.pop(index[1] - 1)

            index_list.pop(index[0])
            index_list.pop(index[1] - 1)
        else:
            point_list.pop(index[1])
            point_list.pop(index[0])
            index_list.pop(index[1])
            index_list.pop(index[0])

        sorted_list.append(value0)
        sorted_list.append(value1)

        sorted_index.append(index[0])
        sorted_index.append(index[1])


        # print point_list
        while True:
            if len(point_list) == 0:
                break
            min = float("inf")
            index = -1
            for i in range(len(point_list)):
                distance = math.sqrt(
                    ((sorted_list[0][0] - point_list[i][0]) ** 2) + ((sorted_list[0][1] - point_list[i][1]) ** 2))
                if distance < min:
                    min = distance
                    index = i
                # print min, index
            sorted_list.insert(len(sorted_list) - 1, point_list[index])
            sorted_index.insert(len(sorted_index) - 1, index_list[index])
            index_list.pop(index)
            point_list.pop(index)


        # print "list: ", sorted_list
        # print "index: ", sorted_index

        return sorted_list, sorted_index

    def make_first_graph2(self):
        self.make_line_info()
        used_l, wall_graph = self.make_edge_info()
        G = nx.Graph()
        G.add_edges_from(wall_graph)
        nx.draw(G)
        plt.show()
        cycles_list = nx.cycle_basis(G)
        nx.find_cycle(cycles_list)





room = [[[[[4.69711197662828, 3.10132797859425, 0.01646059937775135], [4.69711197662828, 3.10132797859425, 3.0554399490356445]], [[-4.69822532075788, 3.12000233212000, 0.01646059937775135], [-4.69822532075788, 3.12000233212000, 3.0554399490356445]], [[2.99053100234752, 3.10472001183641, 0.01646059937775135], [2.99053100234752, 3.10472001183641, 3.0554399490356445]], [[2.85592963672819, 3.10498754810542, 0.01646059937775135], [2.85592963672819, 3.10498754810542, 3.0554399490356445]], [[1.03671818059138, 3.10860344786449, 0.01646059937775135], [1.03671818059138, 3.10860344786449, 3.0554399490356445]], [[1.17232344394907, 3.10833391622898, 0.01646059937775135], [1.17232344394907, 3.10833391622898, 3.0554399490356445]]], [[[4.69940499681119, -3.11213494616376, 0.03738019987940788], [4.69940499681119, -3.11213494616376, 3.0621800422668457]], [[-4.69794659232765, -3.11232705634018, 0.03738019987940788], [-4.69794659232765, -3.11232705634018, 3.0621800422668457]], [[-0.0243317252695328, -3.11223151357283, 0.03738019987940788], [-0.0243317252695328, -3.11223151357283, 3.0621800422668457]], [[-0.215555162439024, -3.11223542275595, 0.03738019987940788], [-0.215555162439024, -3.11223542275595, 3.0621800422668457]]], [[[4.69711197662828, 3.10132797859425, 0.01646059937775135], [4.69711197662828, 3.10132797859425, 3.0554399490356445]], [[4.69940499681119, -3.11213494616376, 0.03738019987940788], [4.69940499681119, -3.11213494616376, 3.0621800422668457]]], [[[-4.69822532075788, 3.12000233212000, 0.01646059937775135], [-4.69822532075788, 3.12000233212000, 3.0554399490356445]], [[-4.69794659232765, -3.11232705634018, 0.03738019987940788], [-4.69794659232765, -3.11232705634018, 3.0621800422668457]], [[-4.69805035458894, -0.792217156192569, 0.036078501492738724], [-4.69805035458894, -0.792217156192569, 3.0480549335479736]], [[-4.69804342456960, -0.947171436056617, 0.036078501492738724], [-4.69804342456960, -0.947171436056617, 3.0480549335479736]]], [[[-4.69805035458894, -0.792217156192569, 0.036078501492738724], [-4.69805035458894, -0.792217156192569, 3.0480549335479736]], [[-0.0736667534394775, -0.792109886945326, 0.02443454973399639], [-0.0736667534394775, -0.792109886945326, 3.0496299266815186]]], [[[2.99053100234752, 3.10472001183641, 0.01646059937775135], [2.99053100234752, 3.10472001183641, 3.0554399490356445]], [[2.98952686704443, -0.790252950611448, 0.024747176095843315], [2.98952686704443, -0.790252950611448, 3.038594961166382]]], [[[2.85592963672819, 3.10498754810542, 0.01646059937775135], [2.85592963672819, 3.10498754810542, 3.0554399490356445]], [[2.85417986314639, -0.790574479280031, 0.03525486961007118], [2.85417986314639, -0.790574479280031, 3.0363399982452393]], [[2.85423922802842, -0.658409047928616, 0.03525486961007118], [2.85423922802842, -0.658409047928616, 3.0363399982452393]]], [[[1.03671818059138, 3.10860344786449, 0.01646059937775135], [1.03671818059138, 3.10860344786449, 3.0554399490356445]], [[1.03899695814266, -0.794886605340243, 0.033170800656080246], [1.03899695814266, -0.794886605340243, 3.0378000736236572]]], [[[2.98952686704443, -0.790252950611448, 0.024747176095843315], [2.98952686704443, -0.790252950611448, 3.038594961166382]], [[2.85417986314639, -0.790574479280031, 0.03525486961007118], [2.85417986314639, -0.790574479280031, 3.0363399982452393]], [[1.03899695814266, -0.794886605340243, 0.033170800656080246], [1.03899695814266, -0.794886605340243, 3.0378000736236572]]], [[[1.17232344394907, 3.10833391622898, 0.01646059937775135], [1.17232344394907, 3.10833391622898, 3.0554399490356445]], [[1.17154207089495, -0.658473605762648, 0.03899608179926872], [1.17154207089495, -0.658473605762648, 3.047840118408203]]], [[[2.85423922802842, -0.658409047928616, 0.03525486961007118], [2.85423922802842, -0.658409047928616, 3.0363399982452393]], [[1.17154207089495, -0.658473605762648, 0.03899608179926872], [1.17154207089495, -0.658473605762648, 3.047840118408203]]], [[[-4.69804342456960, -0.947171436056617, 0.036078501492738724], [-4.69804342456960, -0.947171436056617, 3.0480549335479736]], [[-0.0703359259474093, -0.948751631879418, 0.02952166646718979], [-0.0703359259474093, -0.948751631879418, 3.0423800945281982]], [[-0.215571228170187, -0.948702039242467, 0.02952166646718979], [-0.215571228170187, -0.948702039242467, 3.0423800945281982]]], [[[-0.0243317252695328, -3.11223151357283, 0.03738019987940788], [-0.0243317252695328, -3.11223151357283, 3.0621800422668457]], [[-0.0736667534394775, -0.792109886945326, 0.02443454973399639], [-0.0736667534394775, -0.792109886945326, 3.0496299266815186]], [[-0.0703359259474093, -0.948751631879418, 0.02952166646718979], [-0.0703359259474093, -0.948751631879418, 3.0423800945281982]]], [[[-0.215555162439024, -3.11223542275595, 0.03738019987940788], [-0.215555162439024, -3.11223542275595, 3.0621800422668457]], [[-0.215571228170187, -0.948702039242467, 0.02952166646718979], [-0.215571228170187, -0.948702039242467, 3.0423800945281982]]]]]
test_graph = MakingGraph(room)
test_graph.make_first_graph()


# room_data1 = [[[-14.843132781982423, -8.80391178848518, -0.04351113736629486], [-14.843132781982423, -8.839643280141827, 2.4723455905914307]], [[-17.438245010375976, -8.743386267354344, -0.04351113736629486], [-17.438245010375976, -8.77911775901099, 2.4723455905914307]], [[-17.1238400063600, -8.75133706873334, -0.04351113736629486], [-17.1238400063600, -8.75133706873334, 2.4723455905914307]]], [[[-18.3254505408356, -9.27701472589463, -0.058114901185035706], [-18.3254505408356, -9.27701472589463, 2.7158401012420654]], [[-18.1979832182437, -9.27981793202323, -0.058114901185035706], [-18.1979832182437, -9.27981793202323, 2.7158401012420654]], [[-17.0967574486640, -9.30403561200184, -0.058114901185035706], [-17.0967574486640, -9.30403561200184, 2.7158401012420654]], [[-14.4174230711281, -9.36295837271386, -0.058114901185035706], [-14.4174230711281, -9.36295837271386, 2.7158401012420654]], [[-20.2995166858810, -9.23360191856851, -0.058114901185035706], [-20.2995166858810, -9.23360191856851, 2.7158401012420654]]], [[[-18.2858806332493, -6.26994160963731, -0.040653493255376816], [-18.2858806332493, -6.26994160963731, 2.6241400241851807]], [[-17.2439285998268, -6.30057922609423, -0.040653493255376816], [-17.2439285998268, -6.30057922609423, 2.6241400241851807]], [[-14.3671173862256, -6.38516914554737, -0.040653493255376816], [-14.3671173862256, -6.38516914554737, 2.6241400241851807]]], [[[-18.3254505408356, -9.27701472589463, -0.05723990127444267], [-18.3254505408356, -9.27701472589463, 2.654249906539917]], [[-18.2858806332493, -6.26994160963731, -0.05723990127444267], [-18.2858806332493, -6.26994160963731, 2.654249906539917]]], [[[-15.442499923706055, -10.30107202975858, 2.557258129119873], [-15.442499923706055, -10.363773280691028, 3.5232200622558594]], [[-19.50470085144043, -10.239286879431024, 2.557258129119873], [-19.50470085144043, -10.301988130363473, 3.5232200622558594]], [[-19.0194325788897, -10.0806743219335, 2.557258129119873], [-19.0194325788897, -10.0806743219335, 3.5232200622558594]]], [[[-17.999671091141817, -9.763464736938477, -0.06179890036582947], [-17.990317088896518, -9.763464736938477, 1.048930048942566]], [[-20.140479278564452, -11.79697330021185, -0.06179890036582947], [-20.140479278564452, -11.805858469737286, 1.048930048942566]], [[-20.2703727272275, -11.9208507029624, -0.06179890036582947], [-20.2703727272275, -11.9208507029624, 1.048930048942566]]], [[[-18.1979832182437, -9.27981793202323, 0.046936098486185074], [-18.1979832182437, -9.27981793202323, 3.525599956512451]], [[-19.0194325788897, -10.0806743219335, 0.046936098486185074], [-19.0194325788897, -10.0806743219335, 3.525599956512451]], [[-20.2345580062695, -11.2653376860807, 0.046936098486185074], [-20.2345580062695, -11.2653376860807, 3.525599956512451]], [[-20.2770328444668, -11.3067477196268, 0.046936098486185074], [-20.2770328444668, -11.3067477196268, 3.525599956512451]]], [[[-17.1238400063600, -8.75133706873334, -0.05781890079379082], [-17.1238400063600, -8.75133706873334, 2.4668939113616943]], [[-17.0967574486640, -9.30403561200184, -0.05781890079379082], [-17.0967574486640, -9.30403561200184, 2.4668939113616943]], [[-17.2439285998268, -6.30057922609423, -0.05781890079379082], [-17.2439285998268, -6.30057922609423, 2.4668939113616943]]], [[[-15.091699409484864, -12.297959761238939, 1.6532005071640015], [-15.091699409484864, -12.309748615512067, 2.780600070953369]], [[-19.134947967529296, -12.256898448371517, 1.6532005071640015], [-19.134947967529296, -12.268687302644645, 2.780600070953369]]], [[[-14.4174230711281, -9.36295837271386, 1.630044937133789], [-14.4174230711281, -9.36295837271386, 2.7257399559020996]], [[-14.3671173862256, -6.38516914554737, 1.630044937133789], [-14.3671173862256, -6.38516914554737, 2.7257399559020996]]], [[[-15.844315338134766, -11.302915399861188, 2.5874900817871094], [-15.844315338134766, -11.303277411771317, 3.560070037841797]], [[-19.51559944152832, -11.272296907864574, 2.5874900817871094], [-19.51559944152832, -11.272658919774704, 3.560070037841797]], [[-20.2345580062695, -11.2653376860807, 2.5874900817871094], [-20.2345580062695, -11.2653376860807, 3.560070037841797]]], [[[-20.2995166858810, -9.23360191856851, -0.050511401146650314], [-20.2995166858810, -9.23360191856851, 2.658989906311035]], [[-20.2703727272275, -11.9208507029624, -0.050511401146650314], [-20.2703727272275, -11.9208507029624, 2.658989906311035]], [[-20.2770328444668, -11.3067477196268, -0.050511401146650314], [-20.2770328444668, -11.3067477196268, 2.658989906311035]]]
# room_data2 = [[[-13.9882267533834, 2.10776504309815, -0.07901989668607712], [-13.9882267533834, 2.10776504309815, 2.7433600425720215]], [[-18.1898743014517, 2.20930446042606, -0.07901989668607712], [-18.1898743014517, 2.20930446042606, 2.7433600425720215]]], [[[-14.0554708448617, -0.279888630598403, 0.46682220697402954], [-14.0554708448617, -0.279888630598403, 2.7737998962402344]], [[-20.1234888385434, -0.0787875642884480, 0.46682220697402954], [-20.1234888385434, -0.0787875642884480, 2.7737998962402344]]], [[[-13.9882267533834, 2.10776504309815, -0.03710171952843666], [-13.9882267533834, 2.10776504309815, 2.7112951278686523]], [[-14.0554708448617, -0.279888630598403, -0.03710171952843666], [-14.0554708448617, -0.279888630598403, 2.7112951278686523]]], [[[-19.185997772216798, 2.747775292770881, 0.8937339782714844], [-19.185997772216798, 2.746416288816504, 2.6648898124694824]], [[-23.221987915039062, 2.8901010997443306, 0.8937339782714844], [-23.221987915039062, 2.8887420957899534, 2.6648898124694824]], [[-20.0474526981647, 2.77883953824566, 0.8937339782714844], [-20.0474526981647, 2.77883953824566, 2.6648898124694824]]], [[[-17.16470069885254, 4.5695483171096285, 0.49453625082969666], [-17.16470069885254, 4.592405670708457, 2.455202579498291]], [[-15.198234818860733, 2.513360071182251, 0.49453625082969666], [-15.17637485246513, 2.513360071182251, 2.455202579498291]]], [[[-18.1898743014517, 2.20930446042606, -0.0636974573135376], [-18.1898743014517, 2.20930446042606, 2.642630100250244]], [[-20.1080328712803, 0.502086092989112, -0.0636974573135376], [-20.1080328712803, 0.502086092989112, 2.642630100250244]]], [[[-20.1234888385434, -0.0787875642884480, 0.5764070153236389], [-20.1234888385434, -0.0787875642884480, 2.674229621887207]], [[-20.0474526981647, 2.77883953824566, 0.5764070153236389], [-20.0474526981647, 2.77883953824566, 2.674229621887207]], [[-20.1080328712803, 0.502086092989112, 0.5764070153236389], [-20.1080328712803, 0.502086092989112, 2.674229621887207]]]
# room_data3 = [[[-8.22436569486585, -6.43367407724930, -0.05531720072031021], [-8.22436569486585, -6.43367407724930, 2.815920114517212]], [[-8.24055117992638, -7.32745457465030, -0.05531720072031021], [-8.24055117992638, -7.32745457465030, 2.815920114517212]], [[-8.17200023108872, -3.54199489146553, -0.05531720072031021], [-8.17200023108872, -3.54199489146553, 2.815920114517212]], [[-8.33283994496266, -12.4237428854523, -0.05531720072031021], [-8.33283994496266, -12.4237428854523, 2.815920114517212]]], [[[-11.1576361757549, -6.36237320329200, -0.01605239510536194], [-11.1576361757549, -6.36237320329200, 2.8548126220703125]], [[-11.1834969617335, -7.30921865637703, -0.01605239510536194], [-11.1834969617335, -7.30921865637703, 2.8548126220703125]], [[-11.0779175997053, -3.44362311883215, -0.01605239510536194], [-11.0779175997053, -3.44362311883215, 2.8548126220703125]]], [[[-8.22436569486585, -6.43367407724930, -0.06362590193748474], [-8.22436569486585, -6.43367407724930, 2.7482500076293945]], [[-11.1576361757549, -6.36237320329200, -0.06362590193748474], [-11.1576361757549, -6.36237320329200, 2.7482500076293945]]], [[[-5.22965125644618, -3.64159995507385, 1.5518648624420166], [-5.22965125644618, -3.64159995507385, 2.749429941177368]], [[-5.41078385603416, -12.5300541567028, 1.5518648624420166], [-5.41078385603416, -12.5300541567028, 2.749429941177368]]], [[[-8.24055117992638, -7.32745457465030, -0.03915967419743538], [-8.24055117992638, -7.32745457465030, 2.7278099060058594]], [[-11.1834969617335, -7.30921865637703, -0.03915967419743538], [-11.1834969617335, -7.30921865637703, 2.7278099060058594]]], [[[-8.17200023108872, -3.54199489146553, 1.1497207880020142], [-8.17200023108872, -3.54199489146553, 2.7260000705718994]], [[-11.0779175997053, -3.44362311883215, 1.1497207880020142], [-11.0779175997053, -3.44362311883215, 2.7260000705718994]], [[-5.22965125644618, -3.64159995507385, 1.1497207880020142], [-5.22965125644618, -3.64159995507385, 2.7260000705718994]]], [[[-8.33283994496266, -12.4237428854523, 2.2350261211395264], [-8.33283994496266, -12.4237428854523, 2.666980028152466]], [[-5.41078385603416, -12.5300541567028, 2.2350261211395264], [-5.41078385603416, -12.5300541567028, 2.666980028152466]]]
# room_data4 = [[[-9.16419438755243, 1.09987541291738, -0.0697949007153511], [-9.16419438755243, 1.09987541291738, 3.5764524936676025]], [[-9.10696015318725, 4.09179427041278, -0.0697949007153511], [-9.10696015318725, 4.09179427041278, 3.5764524936676025]], [[-9.17452020350784, 0.560093518065788, -0.0697949007153511], [-9.17452020350784, 0.560093518065788, 3.5764524936676025]], [[-9.09812436995460, 4.55368472404998, -0.0697949007153511], [-9.09812436995460, 4.55368472404998, 3.5764524936676025]]], [[[-11.0742677399924, 1.13846715323181, -0.041957758367061615], [-11.0742677399924, 1.13846715323181, 2.6397199630737305]], [[-11.0023913189246, 4.10608897276229, -0.041957758367061615], [-11.0023913189246, 4.10608897276229, 2.6397199630737305]]], [[[-9.16419438755243, 1.09987541291738, -0.04131088778376579], [-9.16419438755243, 1.09987541291738, 2.7004499435424805]], [[-11.0742677399924, 1.13846715323181, -0.04131088778376579], [-11.0742677399924, 1.13846715323181, 2.7004499435424805]]], [[[-9.10696015318725, 4.09179427041278, -0.04717940092086792], [-9.10696015318725, 4.09179427041278, 2.939236640930176]], [[-11.0023913189246, 4.10608897276229, -0.04717940092086792], [-11.0023913189246, 4.10608897276229, 2.939236640930176]]], [[[-6.27199278443518, 0.440161639523739, 0.04081575572490692], [-6.27199278443518, 0.440161639523739, 3.5404577255249023]], [[-6.22765613455059, 4.44463889660345, 0.04081575572490692], [-6.22765613455059, 4.44463889660345, 3.5404577255249023]], [[-6.22758469438955, 4.45109135751020, 0.04081575572490692], [-6.22758469438955, 4.45109135751020, 3.5404577255249023]], [[-6.23261804237292, 3.99648038489895, 0.04081575572490692], [-6.23261804237292, 3.99648038489895, 3.5404577255249023]], [[-6.27100476672143, 0.529399199749842, 0.04081575572490692], [-6.27100476672143, 0.529399199749842, 3.5404577255249023]], [[-6.26730045492302, 0.863971892736420, 0.04081575572490692], [-6.26730045492302, 0.863971892736420, 3.5404577255249023]]], [[[-9.17452020350784, 0.560093518065788, 0.831367015838623], [-9.17452020350784, 0.560093518065788, 3.609110116958618]], [[-6.27199278443518, 0.440161639523739, 0.831367015838623], [-6.27199278443518, 0.440161639523739, 3.609110116958618]], [[-6.18402414338701, 0.436526792078588, 0.831367015838623], [-6.18402414338701, 0.436526792078588, 3.609110116958618]], [[-5.74586150843356, 0.418421995696099, 0.831367015838623], [-5.74586150843356, 0.418421995696099, 3.609110116958618]]], [[[-9.09812436995460, 4.55368472404998, 1.1210224628448486], [-9.09812436995460, 4.55368472404998, 3.5532500743865967]], [[-6.22765613455059, 4.44463889660345, 1.1210224628448486], [-6.22765613455059, 4.44463889660345, 3.5532500743865967]], [[-6.23426137967080, 4.44488982236208, 1.1210224628448486], [-6.23426137967080, 4.44488982236208, 3.5532500743865967]], [[-5.81640007319555, 4.42901574601437, 1.1210224628448486], [-5.81640007319555, 4.42901574601437, 3.5532500743865967]]], [[[-6.22758469438955, 4.45109135751020, -0.026680896058678627], [-6.22758469438955, 4.45109135751020, 2.6328399181365967]], [[-6.23426137967080, 4.44488982236208, -0.026680896058678627], [-6.23426137967080, 4.44488982236208, 2.6328399181365967]], [[-5.09040003980409, 5.50734761465530, -0.026680896058678627], [-5.09040003980409, 5.50734761465530, 2.6328399181365967]]], [[[-6.23261804237292, 3.99648038489895, 0.8616610169410706], [-6.23261804237292, 3.99648038489895, 2.7240500450134277]], [[-5.81640007319555, 4.42901574601437, 0.8616610169410706], [-5.81640007319555, 4.42901574601437, 2.7240500450134277]], [[-5.09778995562536, 5.17579822472078, 0.8616610169410706], [-5.09778995562536, 5.17579822472078, 2.7240500450134277]]], [[[-5.09040003980409, 5.50734761465530, 1.2802201509475708], [-5.09040003980409, 5.50734761465530, 2.7214701175689697]], [[-5.09778995562536, 5.17579822472078, 1.2802201509475708], [-5.09778995562536, 5.17579822472078, 2.7214701175689697]]], [[[-6.27100476672143, 0.529399199749842, -0.006819145288318396], [-6.27100476672143, 0.529399199749842, 2.871880054473877]], [[-6.18402414338701, 0.436526792078588, -0.006819145288318396], [-6.18402414338701, 0.436526792078588, 2.871880054473877]]], [[[-6.26730045492302, 0.863971892736420, 0.8409819602966309], [-6.26730045492302, 0.863971892736420, 2.847158670425415]], [[-5.74586150843356, 0.418421995696099, 0.8409819602966309], [-5.74586150843356, 0.418421995696099, 2.847158670425415]]]
# room_data5 = [[[-7.95936007107996, 8.64695337226739, -0.035781167447566986], [-7.95936007107996, 8.64695337226739, 2.7338199615478516]], [[-7.89685339784101, 11.5114204000084, -0.035781167447566986], [-7.89685339784101, 11.5114204000084, 2.7338199615478516]]], [[[-7.95936007107996, 8.64695337226739, -0.021520297974348068], [-7.95936007107996, 8.64695337226739, 2.7315800189971924]], [[-10.9090795734534, 8.68356004660824, -0.021520297974348068], [-10.9090795734534, 8.68356004660824, 2.7315800189971924]], [[-7.31689831613428, 8.63898027915775, -0.021520297974348068], [-7.31689831613428, 8.63898027915775, 2.7315800189971924]]], [[[-7.89685339784101, 11.5114204000084, -0.027307700365781784], [-7.89685339784101, 11.5114204000084, 2.7469398975372314]], [[-10.8584073826224, 11.5680691081958, -0.027307700365781784], [-10.8584073826224, 11.5680691081958, 2.7469398975372314]]], [[[-10.9090795734534, 8.68356004660824, -0.028286900371313095], [-10.9090795734534, 8.68356004660824, 2.7397000789642334]], [[-10.8584073826224, 11.5680691081958, -0.028286900371313095], [-10.8584073826224, 11.5680691081958, 2.7397000789642334]]], [[[-4.478678155648132, 10.29980010986328, 0.6099429726600647], [-4.45965986251831, 10.251765658431925, 2.042870044708252]], [[-6.2285463333129885, 8.432968124531932, 0.6099429726600647], [-6.1976740928108125, 8.397579956054688, 2.042870044708252]]], [[[-7.228358493035251, 11.140910339355468, -0.024580899626016617], [-7.322257291808834, 11.140910339355468, 0.6933168768882751]], [[-7.3175809011222475, 8.524690437316895, -0.024580899626016617], [-7.411479699895829, 8.524690437316895, 0.6933168768882751]], [[-7.31689831613428, 8.63898027915775, -0.024580899626016617], [-7.31689831613428, 8.63898027915775, 0.6933168768882751]]], [[[-4.971500599075901, 10.076835823059081, -0.0015098998555913568], [-4.996043204478775, 10.076835823059081, 1.659060001373291]], [[-6.261675964588791, 8.71020965576172, -0.0015098998555913568], [-6.286218569991665, 8.71020965576172, 1.659060001373291]]]
# #room_data6 = [[[3.8455696748174666, -3.3879299640655516, -0.019697999581694603], [3.8239938860417304, -3.3879299640655516, 2.824049949645996]], [[3.6501533846949634, -12.839883995056152, -0.019697999581694603], [3.6285775959192264, -12.839883995056152, 2.824049949645996]], [[3.65608519711457, -12.5457436313637, -0.019697999581694603], [3.65608519711457, -12.5457436313637, 2.824049949645996]]], [[[0.804239569716523, -6.54038154017062, 0.012340121902525425], [0.804239569716523, -6.54038154017062, 2.743040084838867]], [[0.721542894346992, -12.5104707969833, 0.012340121902525425], [0.721542894346992, -12.5104707969833, 2.743040084838867]], [[0.807182153335845, -6.32794873347691, 0.012340121902525425], [0.807182153335845, -6.32794873347691, 2.743040084838867]]], [[[2.914890003204346, -6.57758891326809, 0.02654203213751316], [2.914890003204346, -6.601107580702488, 2.727034091949463]], [[0.4723494529724121, -6.534798354597827, 0.02654203213751316], [0.4723494529724121, -6.558317022032225, 2.727034091949463]], [[0.804239569716523, -6.54038154017062, 0.02654203213751316], [0.804239569716523, -6.54038154017062, 2.727034091949463]]], [[[2.752879657584189, -10.65029697418213, 0.1148829534649849], [2.7776619435255845, -10.65029697418213, 2.00039005279541]], [[2.6824964099629383, -12.823579025268554, 0.1148829534649849], [2.7072786959043333, -12.823579025268554, 2.00039005279541]]], [[[3.65608519711457, -12.5457436313637, 2.29584002494812], [3.65608519711457, -12.5457436313637, 2.714899778366089]], [[0.721542894346992, -12.5104707969833, 2.29584002494812], [0.721542894346992, -12.5104707969833, 2.714899778366089]]], [[[2.1030599594116213, -6.369116791087999, 0.6462640166282654], [2.1030599594116213, -6.407087092649512, 2.1796600818634033]], [[0.22792800068855285, -6.332702923253266, 0.6462640166282654], [0.22792800068855285, -6.37067322481478, 2.1796600818634033]], [[0.807182153335845, -6.32794873347691, 0.6462640166282654], [0.807182153335845, -6.32794873347691, 2.1796600818634033]]]
# #room_data7 = [[[6.84836677829886, -0.657818792669299, -0.04275437444448471], [6.84836677829886, -0.657818792669299, 2.9064900875091553]], [[6.91161990299326, 2.34068288045553, -0.04275437444448471], [6.91161990299326, 2.34068288045553, 2.9064900875091553]], [[6.98157308188523, 5.65679927725593, -0.04275437444448471], [6.98157308188523, 5.65679927725593, 2.9064900875091553]], [[6.96690661562464, 4.96153838961348, -0.04275437444448471], [6.96690661562464, 4.96153838961348, 2.9064900875091553]], [[6.97924719500192, 5.54654107665678, -0.04275437444448471], [6.97924719500192, 5.54654107665678, 2.9064900875091553]], [[6.99017327345438, 6.06448963143048, -0.04275437444448471], [6.99017327345438, 6.06448963143048, 2.9064900875091553]]], [[[6.84836677829886, -0.657818792669299, 0.04812482371926308], [6.84836677829886, -0.657818792669299, 2.8469200134277344]], [[1.20398386210918, -0.618553097855484, 0.04812482371926308], [1.20398386210918, -0.618553097855484, 2.8469200134277344]]], [[[1.20398386210918, -0.618553097855484, -0.03193100169301033], [1.20398386210918, -0.618553097855484, 2.8462343215942383]], [[1.21095263864178, 5.79104610796322, -0.03193100169301033], [1.21095263864178, 5.79104610796322, 2.8462343215942383]], [[1.21091214887766, 5.75380525819936, -0.03193100169301033], [1.21091214887766, 5.75380525819936, 2.8462343215942383]]], [[[1.21095263864178, 5.79104610796322, -0.0171549990773201], [1.21095263864178, 5.79104610796322, 1.7158299684524536]], [[3.94428421443078, 5.69665407212651, -0.0171549990773201], [3.94428421443078, 5.69665407212651, 1.7158299684524536]], [[3.15252626438834, 5.72399639877886, -0.0171549990773201], [3.15252626438834, 5.72399639877886, 1.7158299684524536]]], [[[3.94428421443078, 5.69665407212651, 0.08092460036277771], [3.94428421443078, 5.69665407212651, 2.7730400562286377]], [[3.90846583538452, 2.34844838828785, 0.08092460036277771], [3.90846583538452, 2.34844838828785, 2.7730400562286377]], [[3.94440403637520, 5.70785470504333, 0.08092460036277771], [3.94440403637520, 5.70785470504333, 2.7730400562286377]], [[3.94064593476753, 5.35655748003457, 0.08092460036277771], [3.94064593476753, 5.35655748003457, 2.7730400562286377]]], [[[6.91161990299326, 2.34068288045553, 0.19516649842262268], [6.91161990299326, 2.34068288045553, 2.7421875]], [[3.90846583538452, 2.34844838828785, 0.19516649842262268], [3.90846583538452, 2.34844838828785, 2.7421875]], [[3.11856182713107, 2.35049090945885, 0.19516649842262268], [3.11856182713107, 2.35049090945885, 2.7421875]], [[7.08204855008621, 2.34024218878136, 0.19516649842262268], [7.08204855008621, 2.34024218878136, 2.7421875]]], [[[6.98157308188523, 5.65679927725593, 2.174489974975586], [6.98157308188523, 5.65679927725593, 2.7659800052642822]], [[1.21091214887766, 5.75380525819936, 2.174489974975586], [1.21091214887766, 5.75380525819936, 2.7659800052642822]], [[3.94440403637520, 5.70785470504333, 2.174489974975586], [3.94440403637520, 5.70785470504333, 2.7659800052642822]], [[1.70984460949445, 5.74541810232094, 2.174489974975586], [1.70984460949445, 5.74541810232094, 2.7659800052642822]], [[7.02035655649405, 5.65614731917998, 2.174489974975586], [7.02035655649405, 5.65614731917998, 2.7659800052642822]]], [[[6.96690661562464, 4.96153838961348, 0.027341801673173904], [6.96690661562464, 4.96153838961348, 1.7038700580596924]], [[6.77188664208424, 4.99367403547951, 0.027341801673173904], [6.77188664208424, 4.99367403547951, 1.7038700580596924]]], [[[1.0692304390207137, 5.62299222946167, 2.205820083618164], [0.912250727489605, 5.62299222946167, 2.7465100288391113]], [[1.063609060345998, 2.066963481903076, 2.205820083618164], [0.9066293488148892, 2.066963481903076, 2.7465100288391113]], [[1.70984460949445, 5.74541810232094, 2.205820083618164], [1.70984460949445, 5.74541810232094, 2.7465100288391113]]], [[[3.15252626438834, 5.72399639877886, -0.04262799769639969], [3.15252626438834, 5.72399639877886, 1.304669976234436]], [[3.11856182713107, 2.35049090945885, -0.04262799769639969], [3.11856182713107, 2.35049090945885, 1.304669976234436]], [[3.14891781517248, 5.36558848094868, -0.04262799769639969], [3.14891781517248, 5.36558848094868, 1.304669976234436]]], [[[6.97924719500192, 5.54654107665678, 0.019460272043943405], [6.97924719500192, 5.54654107665678, 2.6313083171844482]], [[7.02035655649405, 5.65614731917998, 0.019460272043943405], [7.02035655649405, 5.65614731917998, 2.6313083171844482]], [[6.77188664208424, 4.99367403547951, 0.019460272043943405], [6.77188664208424, 4.99367403547951, 2.6313083171844482]]], [[[6.99017327345438, 6.06448963143048, 0.04861133173108101], [6.99017327345438, 6.06448963143048, 1.6668567657470703]], [[7.08204855008621, 2.34024218878136, 0.04861133173108101], [7.08204855008621, 2.34024218878136, 1.6668567657470703]]], [[[3.94064593476753, 5.35655748003457, 0.030418001115322113], [3.94064593476753, 5.35655748003457, 1.2570699453353882]], [[3.14891781517248, 5.36558848094868, 0.030418001115322113], [3.14891781517248, 5.36558848094868, 1.2570699453353882]]]
# #room_data7 = [[[6.84836677829886, -0.657818792669299, -0.04275437444448471], [6.84836677829886, -0.657818792669299, 2.9064900875091553]], [[6.91161990299326, 2.34068288045553, -0.04275437444448471], [6.91161990299326, 2.34068288045553, 2.9064900875091553]], [[6.98157308188523, 5.65679927725593, -0.04275437444448471], [6.98157308188523, 5.65679927725593, 2.9064900875091553]], [[6.96690661562464, 4.96153838961348, -0.04275437444448471], [6.96690661562464, 4.96153838961348, 2.9064900875091553]], [[6.97924719500192, 5.54654107665678, -0.04275437444448471], [6.97924719500192, 5.54654107665678, 2.9064900875091553]], [[6.99017327345438, 6.06448963143048, -0.04275437444448471], [6.99017327345438, 6.06448963143048, 2.9064900875091553]]], [[[6.84836677829886, -0.657818792669299, 0.04812482371926308], [6.84836677829886, -0.657818792669299, 2.8469200134277344]], [[1.20398386210918, -0.618553097855484, 0.04812482371926308], [1.20398386210918, -0.618553097855484, 2.8469200134277344]]], [[[1.20398386210918, -0.618553097855484, -0.03193100169301033], [1.20398386210918, -0.618553097855484, 2.8462343215942383]], [[1.21095263864178, 5.79104610796322, -0.03193100169301033], [1.21095263864178, 5.79104610796322, 2.8462343215942383]], [[1.21091214887766, 5.75380525819936, -0.03193100169301033], [1.21091214887766, 5.75380525819936, 2.8462343215942383]]], [[[1.21095263864178, 5.79104610796322, -0.0171549990773201], [1.21095263864178, 5.79104610796322, 1.7158299684524536]], [[3.94428421443078, 5.69665407212651, -0.0171549990773201], [3.94428421443078, 5.69665407212651, 1.7158299684524536]], [[3.15252626438834, 5.72399639877886, -0.0171549990773201], [3.15252626438834, 5.72399639877886, 1.7158299684524536]]], [[[3.94428421443078, 5.69665407212651, 0.08092460036277771], [3.94428421443078, 5.69665407212651, 2.7730400562286377]], [[3.90846583538452, 2.34844838828785, 0.08092460036277771], [3.90846583538452, 2.34844838828785, 2.7730400562286377]], [[3.94440403637520, 5.70785470504333, 0.08092460036277771], [3.94440403637520, 5.70785470504333, 2.7730400562286377]], [[3.94064593476753, 5.35655748003457, 0.08092460036277771], [3.94064593476753, 5.35655748003457, 2.7730400562286377]]], [[[6.91161990299326, 2.34068288045553, 0.19516649842262268], [6.91161990299326, 2.34068288045553, 2.7421875]], [[3.90846583538452, 2.34844838828785, 0.19516649842262268], [3.90846583538452, 2.34844838828785, 2.7421875]], [[3.11856182713107, 2.35049090945885, 0.19516649842262268], [3.11856182713107, 2.35049090945885, 2.7421875]], [[7.08204855008621, 2.34024218878136, 0.19516649842262268], [7.08204855008621, 2.34024218878136, 2.7421875]]], [[[6.98157308188523, 5.65679927725593, 2.174489974975586], [6.98157308188523, 5.65679927725593, 2.7659800052642822]], [[1.21091214887766, 5.75380525819936, 2.174489974975586], [1.21091214887766, 5.75380525819936, 2.7659800052642822]], [[3.94440403637520, 5.70785470504333, 2.174489974975586], [3.94440403637520, 5.70785470504333, 2.7659800052642822]], [[1.70984460949445, 5.74541810232094, 2.174489974975586], [1.70984460949445, 5.74541810232094, 2.7659800052642822]], [[7.02035655649405, 5.65614731917998, 2.174489974975586], [7.02035655649405, 5.65614731917998, 2.7659800052642822]]], [[[6.96690661562464, 4.96153838961348, 0.027341801673173904], [6.96690661562464, 4.96153838961348, 1.7038700580596924]], [[6.77188664208424, 4.99367403547951, 0.027341801673173904], [6.77188664208424, 4.99367403547951, 1.7038700580596924]]], [[[1.0692304390207137, 5.62299222946167, 2.205820083618164], [0.912250727489605, 5.62299222946167, 2.7465100288391113]], [[1.063609060345998, 2.066963481903076, 2.205820083618164], [0.9066293488148892, 2.066963481903076, 2.7465100288391113]], [[1.70984460949445, 5.74541810232094, 2.205820083618164], [1.70984460949445, 5.74541810232094, 2.7465100288391113]]], [[[3.15252626438834, 5.72399639877886, -0.04262799769639969], [3.15252626438834, 5.72399639877886, 1.304669976234436]], [[3.11856182713107, 2.35049090945885, -0.04262799769639969], [3.11856182713107, 2.35049090945885, 1.304669976234436]], [[3.14891781517248, 5.36558848094868, -0.04262799769639969], [3.14891781517248, 5.36558848094868, 1.304669976234436]]], [[[6.97924719500192, 5.54654107665678, 0.019460272043943405], [6.97924719500192, 5.54654107665678, 2.6313083171844482]], [[7.02035655649405, 5.65614731917998, 0.019460272043943405], [7.02035655649405, 5.65614731917998, 2.6313083171844482]], [[6.77188664208424, 4.99367403547951, 0.019460272043943405], [6.77188664208424, 4.99367403547951, 2.6313083171844482]]], [[[6.99017327345438, 6.06448963143048, 0.04861133173108101], [6.99017327345438, 6.06448963143048, 1.6668567657470703]], [[7.08204855008621, 2.34024218878136, 0.04861133173108101], [7.08204855008621, 2.34024218878136, 1.6668567657470703]]], [[[3.94064593476753, 5.35655748003457, 0.030418001115322113], [3.94064593476753, 5.35655748003457, 1.2570699453353882]], [[3.14891781517248, 5.36558848094868, 0.030418001115322113], [3.14891781517248, 5.36558848094868, 1.2570699453353882]]]
# room_data7 = [[[1.20398386210918, -0.618553097855484, 0.05150900036096573], [1.20398386210918, -0.618553097855484, 2.8462343215942383]], [[1.21091214887766, 5.75380525819936, 0.05150900036096573], [1.21091214887766, 5.75380525819936, 2.8462343215942383]]], [[[3.90846583538452, 2.34844838828785, 0.08092460036277771], [3.90846583538452, 2.34844838828785, 2.7730400562286377]], [[3.94440403637520, 5.70785470504333, 0.08092460036277771], [3.94440403637520, 5.70785470504333, 2.7730400562286377]]], [[[6.91161990299326, 2.34068288045553, -0.04275437444448471], [6.91161990299326, 2.34068288045553, 2.9064900875091553]], [[6.84836677829886, -0.657818792669299, -0.04275437444448471], [6.84836677829886, -0.657818792669299, 2.9064900875091553]], [[6.98157308188523, 5.65679927725593, -0.04275437444448471], [6.98157308188523, 5.65679927725593, 2.9064900875091553]]], [[[3.90846583538452, 2.34844838828785, 0.19516649842262268], [3.90846583538452, 2.34844838828785, 2.7421875]], [[6.91161990299326, 2.34068288045553, 0.19516649842262268], [6.91161990299326, 2.34068288045553, 2.7421875]]], [[[1.20398386210918, -0.618553097855484, 0.04812482371926308], [1.20398386210918, -0.618553097855484, 2.8469200134277344]], [[6.84836677829886, -0.657818792669299, 0.04812482371926308], [6.84836677829886, -0.657818792669299, 2.8469200134277344]]], [[[1.21091214887766, 5.75380525819936, 2.174489974975586], [1.21091214887766, 5.75380525819936, 2.7659800052642822]], [[3.94440403637520, 5.70785470504333, 2.174489974975586], [3.94440403637520, 5.70785470504333, 2.7659800052642822]], [[6.98157308188523, 5.65679927725593, 2.174489974975586], [6.98157308188523, 5.65679927725593, 2.7659800052642822]]], [[[3.287551747537691, 6.034244728088379, -0.04366200044751167], [3.231484093605423, 6.034244728088379, 1.5853400230407715]], [[3.194617512431096, 1.6514357805252076, -0.04366200044751167], [3.138549858498828, 1.6514357805252076, 1.5853400230407715]]]
# #room_data8 = [[[5.98249461289476, 11.1608773707943, -0.03822299838066101], [5.98249461289476, 11.1608773707943, 2.8251700401306152]], [[7.10171374884699, 11.1348849458587, -0.03822299838066101], [7.10171374884699, 11.1348849458587, 2.8251700401306152]], [[1.09063597286797, 11.2744844959872, -0.03822299838066101], [1.09063597286797, 11.2744844959872, 2.8251700401306152]], [[7.22787765390050, 11.1319549514310, -0.03822299838066101], [7.22787765390050, 11.1319549514310, 2.8251700401306152]]], [[[5.51954519631325, 15.5508033438219, -0.028179999440908432], [5.51954519631325, 15.5508033438219, 3.664299964904785]], [[4.15497448877876, 15.5577605177141, -0.028179999440908432], [4.15497448877876, 15.5577605177141, 3.664299964904785]], [[6.13310446633107, 15.5476751522880, -0.028179999440908432], [6.13310446633107, 15.5476751522880, 3.664299964904785]], [[2.17492018500195, 15.5678556941906, -0.028179999440908432], [2.17492018500195, 15.5678556941906, 3.664299964904785]]], [[[6.01947226105425, 12.2379215429375, 2.074836254119873], [6.01947226105425, 12.2379215429375, 3.776669979095459]], [[2.03540814476709, 12.2839358973475, 2.074836254119873], [2.03540814476709, 12.2839358973475, 3.776669979095459]], [[6.13464659060491, 12.2365913252843, 2.074836254119873], [6.13464659060491, 12.2365913252843, 3.776669979095459]]], [[[5.508870963249669, 17.494519424438476, -0.01743599958717823], [5.5246776528391335, 17.494519424438476, 2.7284250259399414]], [[5.520370347408449, 15.380671310424805, -0.01743599958717823], [5.536177036997914, 15.380671310424805, 2.7284250259399414]], [[5.51954519631325, 15.5508033438219, -0.01743599958717823], [5.51954519631325, 15.5508033438219, 2.7284250259399414]]], [[[4.18177911616165, 17.413335037231445, 0.9544594883918762], [4.175208677344237, 17.413335037231445, 2.7188050746917725]], [[4.105109295354745, 12.727200317382813, 0.9544594883918762], [4.098538856537332, 12.727200317382813, 2.7188050746917725]], [[4.15497448877876, 15.5577605177141, 0.9544594883918762], [4.15497448877876, 15.5577605177141, 2.7188050746917725]]], [[[5.98249461289476, 11.1608773707943, 0.7229470014572144], [5.98249461289476, 11.1608773707943, 3.715019941329956]], [[6.13310446633107, 15.5476751522880, 0.7229470014572144], [6.13310446633107, 15.5476751522880, 3.715019941329956]], [[6.01947226105425, 12.2379215429375, 0.7229470014572144], [6.01947226105425, 12.2379215429375, 3.715019941329956]], [[6.02328964254473, 12.3491100227843, 0.7229470014572144], [6.02328964254473, 12.3491100227843, 3.715019941329956]]], [[[7.023777207617131, 11.53193302154541, 2.08516001701355], [6.998667665587154, 11.53193302154541, 2.744800090789795]], [[7.011132472352924, 8.03610019683838, 2.08516001701355], [6.986022930322946, 8.03610019683838, 2.744800090789795]], [[7.10171374884699, 11.1348849458587, 2.08516001701355], [7.10171374884699, 11.1348849458587, 2.744800090789795]]], [[[2.17492018500195, 15.5678556941906, 2.532823085784912], [2.17492018500195, 15.5678556941906, 3.678394317626953]], [[2.03540814476709, 12.2839358973475, 2.532823085784912], [2.03540814476709, 12.2839358973475, 3.678394317626953]]], [[[1.09063597286797, 11.2744844959872, 1.8527913093566895], [1.09063597286797, 11.2744844959872, 2.7633800506591797]], [[1.04467068513269, 8.50075991844054, 1.8527913093566895], [1.04467068513269, 8.50075991844054, 2.7633800506591797]]], [[[7.22787765390050, 11.1319549514310, 0.03715600073337555], [7.22787765390050, 11.1319549514310, 2.7820117473602295]], [[6.13464659060491, 12.2365913252843, 0.03715600073337555], [6.13464659060491, 12.2365913252843, 2.7820117473602295]], [[6.02328964254473, 12.3491100227843, 0.03715600073337555], [6.02328964254473, 12.3491100227843, 2.7820117473602295]]], [[[4.951222610473633, 8.371078619355067, 1.1397708654403687], [4.951222610473633, 8.329139876945671, 2.7869200706481934]], [[0.781783151626587, 8.478513634795128, 1.1397708654403687], [0.781783151626587, 8.43657489238573, 2.7869200706481934]], [[1.04467068513269, 8.50075991844054, 1.1397708654403687], [1.04467068513269, 8.50075991844054, 2.7869200706481934]]]
# room_data8 = [[[5.98249461289476, 11.1608773707943, -0.03822299838066101], [5.98249461289476, 11.1608773707943, 2.8251700401306152]], [[7.10171374884699, 11.1348849458587, -0.03822299838066101], [7.10171374884699, 11.1348849458587, 2.8251700401306152]], [[1.09063597286797, 11.2744844959872, -0.03822299838066101], [1.09063597286797, 11.2744844959872, 2.8251700401306152]], [[7.22787765390050, 11.1319549514310, -0.03822299838066101], [7.22787765390050, 11.1319549514310, 2.8251700401306152]]], [[[5.51954519631325, 15.5508033438219, -0.028179999440908432], [5.51954519631325, 15.5508033438219, 3.664299964904785]], [[4.15497448877876, 15.5577605177141, -0.028179999440908432], [4.15497448877876, 15.5577605177141, 3.664299964904785]], [[6.13310446633107, 15.5476751522880, -0.028179999440908432], [6.13310446633107, 15.5476751522880, 3.664299964904785]], [[2.17492018500195, 15.5678556941906, -0.028179999440908432], [2.17492018500195, 15.5678556941906, 3.664299964904785]]], [[[6.01947226105425, 12.2379215429375, 2.074836254119873], [6.01947226105425, 12.2379215429375, 3.776669979095459]], [[2.03540814476709, 12.2839358973475, 2.074836254119873], [2.03540814476709, 12.2839358973475, 3.776669979095459]], [[6.13464659060491, 12.2365913252843, 2.074836254119873], [6.13464659060491, 12.2365913252843, 3.776669979095459]]], [[[5.508870963249669, 17.494519424438476, -0.01743599958717823], [5.5246776528391335, 17.494519424438476, 2.7284250259399414]], [[5.520370347408449, 15.380671310424805, -0.01743599958717823], [5.536177036997914, 15.380671310424805, 2.7284250259399414]], [[5.51954519631325, 15.5508033438219, -0.01743599958717823], [5.51954519631325, 15.5508033438219, 2.7284250259399414]]], [[[4.18177911616165, 17.413335037231445, 0.9544594883918762], [4.175208677344237, 17.413335037231445, 2.7188050746917725]], [[4.105109295354745, 12.727200317382813, 0.9544594883918762], [4.098538856537332, 12.727200317382813, 2.7188050746917725]], [[4.15497448877876, 15.5577605177141, 0.9544594883918762], [4.15497448877876, 15.5577605177141, 2.7188050746917725]]], [[[5.98249461289476, 11.1608773707943, 0.7229470014572144], [5.98249461289476, 11.1608773707943, 3.715019941329956]], [[6.13310446633107, 15.5476751522880, 0.7229470014572144], [6.13310446633107, 15.5476751522880, 3.715019941329956]], [[6.01947226105425, 12.2379215429375, 0.7229470014572144], [6.01947226105425, 12.2379215429375, 3.715019941329956]], [[6.02328964254473, 12.3491100227843, 0.7229470014572144], [6.02328964254473, 12.3491100227843, 3.715019941329956]]], [[[7.023777207617131, 11.53193302154541, 2.08516001701355], [6.998667665587154, 11.53193302154541, 2.744800090789795]], [[7.011132472352924, 8.03610019683838, 2.08516001701355], [6.986022930322946, 8.03610019683838, 2.744800090789795]], [[7.10171374884699, 11.1348849458587, 2.08516001701355], [7.10171374884699, 11.1348849458587, 2.744800090789795]]], [[[2.17492018500195, 15.5678556941906, 2.532823085784912], [2.17492018500195, 15.5678556941906, 3.678394317626953]], [[2.03540814476709, 12.2839358973475, 2.532823085784912], [2.03540814476709, 12.2839358973475, 3.678394317626953]]], [[[1.09063597286797, 11.2744844959872, 1.8527913093566895], [1.09063597286797, 11.2744844959872, 2.7633800506591797]], [[1.04467068513269, 8.50075991844054, 1.8527913093566895], [1.04467068513269, 8.50075991844054, 2.7633800506591797]]], [[[7.22787765390050, 11.1319549514310, 0.03715600073337555], [7.22787765390050, 11.1319549514310, 2.7820117473602295]], [[6.13464659060491, 12.2365913252843, 0.03715600073337555], [6.13464659060491, 12.2365913252843, 2.7820117473602295]], [[6.02328964254473, 12.3491100227843, 0.03715600073337555], [6.02328964254473, 12.3491100227843, 2.7820117473602295]]], [[[4.951222610473633, 8.371078619355067, 1.1397708654403687], [4.951222610473633, 8.329139876945671, 2.7869200706481934]], [[0.781783151626587, 8.478513634795128, 1.1397708654403687], [0.781783151626587, 8.43657489238573, 2.7869200706481934]], [[1.04467068513269, 8.50075991844054, 1.1397708654403687], [1.04467068513269, 8.50075991844054, 2.7869200706481934]]]
# room_data9 = [[[7.04025799442058, -21.0593544874510, -0.07773850113153458], [7.04025799442058, -21.0593544874510, 2.739069938659668]], [[7.28475350022606, -4.18320632953085, -0.07773850113153458], [7.28475350022606, -4.18320632953085, 2.739069938659668]], [[7.04370317463083, -20.8215530952849, -0.07773850113153458], [7.04370317463083, -20.8215530952849, 2.739069938659668]]], [[[7.04025799442058, -21.0593544874510, -0.03638039901852608], [7.04025799442058, -21.0593544874510, 2.761810064315796]], [[16.9669848133891, -21.3291127332011, -0.03638039901852608], [16.9669848133891, -21.3291127332011, 2.761810064315796]], [[7.56225491241004, -21.0735397244835, -0.03638039901852608], [7.56225491241004, -21.0735397244835, 2.761810064315796]]], [[[7.28475350022606, -4.18320632953085, -0.037386126816272736], [7.28475350022606, -4.18320632953085, 4.843860149383545]], [[17.1238722170873, -4.30507985072616, -0.037386126816272736], [17.1238722170873, -4.30507985072616, 4.843860149383545]], [[17.1107091947493, -4.30491680524129, -0.037386126816272736], [17.1107091947493, -4.30491680524129, 4.843860149383545]]], [[[17.1048686500047, -5.70335530728665, -0.04071599990129471], [17.1048686500047, -5.70335530728665, 2.8391776084899902]], [[17.1048924559900, -5.71344094996202, -0.04071599990129471], [17.1048924559900, -5.71344094996202, 2.8391776084899902]]], [[[7.806872265886083, -10.273899841308594, 1.3710800409317017], [7.8326294871452875, -10.273899841308594, 3.84837007522583]], [[7.735268122460046, -14.934600067138671, 1.3710800409317017], [7.761025343719252, -14.934600067138671, 3.84837007522583]]], [[[17.01767869131039, -16.155541229248048, -0.02636769972741604], [17.024376668912847, -16.155541229248048, 2.742525100708008]], [[16.96542203715548, -21.48190040588379, -0.02636769972741604], [16.972120014757937, -21.48190040588379, 2.742525100708008]], [[16.9669848133891, -21.3291127332011, -0.02636769972741604], [16.9669848133891, -21.3291127332011, 2.742525100708008]]], [[[17.1048686500047, -5.70335530728665, -0.03307700157165527], [17.1048686500047, -5.70335530728665, 4.815219879150391]], [[17.0998613815901, -5.70822634549394, -0.03307700157165527], [17.0998613815901, -5.70822634549394, 4.815219879150391]], [[17.8161993103552, -5.01137745873692, -0.03307700157165527], [17.8161993103552, -5.01137745873692, 4.815219879150391]]], [[[7.76993927409246, -20.1416635603676, 0.010786999948322773], [7.76993927409246, -20.1416635603676, 2.831343412399292]], [[9.09848413640816, -20.2024421752584, 0.010786999948322773], [9.09848413640816, -20.2024421752584, 2.831343412399292]]], [[[17.1048924559900, -5.71344094996202, -0.05522900074720383], [17.1048924559900, -5.71344094996202, 4.867496967315674]], [[17.0998613815901, -5.70822634549394, -0.05522900074720383], [17.0998613815901, -5.70822634549394, 4.867496967315674]], [[16.4091625183634, -4.99233127179540, -0.05522900074720383], [16.4091625183634, -4.99233127179540, 4.867496967315674]]], [[[7.04370317463083, -20.8215530952849, -0.02710600011050701], [7.04370317463083, -20.8215530952849, 4.883059978485107]], [[7.76993927409246, -20.1416635603676, -0.02710600011050701], [7.76993927409246, -20.1416635603676, 4.883059978485107]], [[7.58709679026490, -20.3128374959304, -0.02710600011050701], [7.58709679026490, -20.3128374959304, 4.883059978485107]], [[8.42553741366158, -19.5279040480895, -0.02710600011050701], [8.42553741366158, -19.5279040480895, 4.883059978485107]]], [[[17.1238722170873, -4.30507985072616, -0.043205998837947845], [17.1238722170873, -4.30507985072616, 4.860270023345947]], [[16.4091625183634, -4.99233127179540, -0.043205998837947845], [16.4091625183634, -4.99233127179540, 4.860270023345947]], [[17.1172403419438, -4.31145693728991, -0.043205998837947845], [17.1172403419438, -4.31145693728991, 4.860270023345947]]], [[[17.1107091947493, -4.30491680524129, -0.01564771495759487], [17.1107091947493, -4.30491680524129, 4.822919845581055]], [[17.8161993103552, -5.01137745873692, -0.01564771495759487], [17.8161993103552, -5.01137745873692, 4.822919845581055]], [[17.1172403419438, -4.31145693728991, -0.01564771495759487], [17.1172403419438, -4.31145693728991, 4.822919845581055]]], [[[7.56225491241004, -21.0735397244835, -0.05770979821681976], [7.56225491241004, -21.0735397244835, 2.730149507522583]], [[7.58709679026490, -20.3128374959304, -0.05770979821681976], [7.58709679026490, -20.3128374959304, 2.730149507522583]]], [[[9.09848413640816, -20.2024421752584, -0.02480349875986576], [9.09848413640816, -20.2024421752584, 4.714360237121582]], [[8.42553741366158, -19.5279040480895, -0.02480349875986576], [8.42553741366158, -19.5279040480895, 4.714360237121582]]]
# room_data10 = [[[15.8195438182093, 2.19978787092354, -0.06434124708175659], [15.8195438182093, 2.19978787092354, 2.7281200885772705]], [[15.8015729954752, -0.792471490116463, -0.06434124708175659], [15.8015729954752, -0.792471490116463, 2.7281200885772705]]], [[[15.8195438182093, 2.19978787092354, -0.034366998821496964], [15.8195438182093, 2.19978787092354, 2.7452547550201416]], [[12.7604330375827, 2.23924286248608, -0.034366998821496964], [12.7604330375827, 2.23924286248608, 2.7452547550201416]], [[18.7252440297661, 2.16231149770545, -0.034366998821496964], [18.7252440297661, 2.16231149770545, 2.7452547550201416]], [[12.4691734570503, 2.24299939342480, -0.034366998821496964], [12.4691734570503, 2.24299939342480, 2.7452547550201416]]], [[[12.7604330375827, 2.23924286248608, -0.07941599935293198], [12.7604330375827, 2.23924286248608, 2.735759973526001]], [[12.6852442656632, -0.762840456003806, -0.07941599935293198], [12.6852442656632, -0.762840456003806, 2.735759973526001]], [[12.8331552943467, 5.14284493418950, -0.07941599935293198], [12.8331552943467, 5.14284493418950, 2.735759973526001]]], [[[15.8015729954752, -0.792471490116463, -0.0409885011613369], [15.8015729954752, -0.792471490116463, 2.749730110168457]], [[12.6852442656632, -0.762840456003806, -0.0409885011613369], [12.6852442656632, -0.762840456003806, 2.749730110168457]], [[18.7015517226300, -0.820045400329551, -0.0409885011613369], [18.7015517226300, -0.820045400329551, 2.749730110168457]], [[12.3311825272658, -0.759473925589964, -0.0409885011613369], [12.3311825272658, -0.759473925589964, 2.749730110168457]], [[9.85758595454455, -0.735954191061934, -0.0409885011613369], [9.85758595454455, -0.735954191061934, 2.749730110168457]]], [[[12.8331552943467, 5.14284493418950, 0.06507892161607742], [12.8331552943467, 5.14284493418950, 2.729099988937378]], [[18.7484939643140, 5.08898310802063, 0.06507892161607742], [18.7484939643140, 5.08898310802063, 2.729099988937378]]], [[[18.7252440297661, 2.16231149770545, 0.1584240049123764], [18.7252440297661, 2.16231149770545, 2.76104998588562]], [[18.7015517226300, -0.820045400329551, 0.1584240049123764], [18.7015517226300, -0.820045400329551, 2.76104998588562]], [[18.7484939643140, 5.08898310802063, 0.1584240049123764], [18.7484939643140, 5.08898310802063, 2.76104998588562]]], [[[12.4691734570503, 2.24299939342480, -0.035366058349609375], [12.4691734570503, 2.24299939342480, 1.9020899534225464]], [[12.3311825272658, -0.759473925589964, -0.035366058349609375], [12.3311825272658, -0.759473925589964, 1.9020899534225464]]], [[[9.915084923662214, 5.449978542327881, 0.13142333924770355], [9.90771773768068, 5.449978542327881, 2.738600015640259]], [[9.85534112659987, -0.9362139821052551, 0.13142333924770355], [9.847973940618335, -0.9362139821052551, 2.738600015640259]], [[9.85758595454455, -0.735954191061934, 0.13142333924770355], [9.85758595454455, -0.735954191061934, 2.738600015640259]]]
# room_data11 = [[[15.9366270869868, 14.1404415426819, 0.05377643182873726], [15.9366270869868, 14.1404415426819, 2.838200092315674]], [[12.9683637640696, 14.1839665071362, 0.05377643182873726], [12.9683637640696, 14.1839665071362, 2.838200092315674]], [[10.5489858328394, 14.2194429211206, 0.05377643182873726], [10.5489858328394, 14.2194429211206, 2.838200092315674]], [[18.9587323109364, 14.0961270705007, 0.05377643182873726], [18.9587323109364, 14.0961270705007, 2.838200092315674]]], [[[16.09356597209603, 17.898200225830077, -0.0005936630186624825], [16.05144492859779, 17.898200225830077, 2.777440071105957]], [[15.922827978116995, 13.809799957275391, -0.0005936630186624825], [15.880706934618754, 13.809799957275391, 2.777440071105957]], [[15.9366270869868, 14.1404415426819, -0.0005936630186624825], [15.9366270869868, 14.1404415426819, 2.777440071105957]]], [[[12.9524506764776, 11.2276143761861, 1.2578541040420532], [12.9524506764776, 11.2276143761861, 2.8579161167144775]], [[19.0017237939264, 11.0292193461294, 1.2578541040420532], [19.0017237939264, 11.0292193461294, 2.8579161167144775]]], [[[12.9683637640696, 14.1839665071362, -0.04415133595466614], [12.9683637640696, 14.1839665071362, 2.808759927749634]], [[12.9524506764776, 11.2276143761861, -0.04415133595466614], [12.9524506764776, 11.2276143761861, 2.808759927749634]], [[12.9842927630947, 17.1432746828372, -0.04415133595466614], [12.9842927630947, 17.1432746828372, 2.808759927749634]]], [[[10.5489858328394, 14.2194429211206, 0.0887880027294159], [10.5489858328394, 14.2194429211206, 2.830486536026001]], [[10.5701977407859, 15.6660611906715, 0.0887880027294159], [10.5701977407859, 15.6660611906715, 2.830486536026001]], [[10.5196173833698, 12.2165615368401, 0.0887880027294159], [10.5196173833698, 12.2165615368401, 2.830486536026001]]], [[[18.9587323109364, 14.0961270705007, 2.085629940032959], [18.9587323109364, 14.0961270705007, 2.7232398986816406]], [[19.0017237939264, 11.0292193461294, 2.085629940032959], [19.0017237939264, 11.0292193461294, 2.7232398986816406]]], [[[10.107160653309558, 16.125424575805663, 2.3952600955963135], [10.096421612727124, 16.125424575805663, 4.815239906311035]], [[11.55830020904541, 14.651974161418508, 2.3952600955963135], [11.55830020904541, 14.641070011136225, 4.815239906311035]], [[10.5701977407859, 15.6660611906715, 2.3952600955963135], [10.5701977407859, 15.6660611906715, 4.815239906311035]]], [[[13.54813117980957, 17.172006317898646, 2.394890069961548], [13.54813117980957, 17.179068783931232, 2.7931976318359375]], [[10.744333076477051, 17.240294436799143, 2.394890069961548], [10.744333076477051, 17.24735690283173, 2.7931976318359375]], [[12.9842927630947, 17.1432746828372, 2.394890069961548], [12.9842927630947, 17.1432746828372, 2.7931976318359375]]], [[[11.309350204467773, 17.1837867640684, 0.06489166617393494], [11.309350204467773, 17.187302434878777, 1.3427300453186035]], [[9.976799774169923, 17.203446188866057, 0.06489166617393494], [9.976799774169923, 17.20696185967643, 1.3427300453186035]]], [[[9.979985179331043, 12.835499954223632, -0.05601000040769577], [9.978099632263184, 12.413604624840078, 2.1451966762542725]], [[11.870900344848632, 10.704495783668776, -0.05601000040769577], [11.703260781147257, 10.469400215148926, 2.1451966762542725]], [[10.5196173833698, 12.2165615368401, -0.05601000040769577], [10.5196173833698, 12.2165615368401, 2.1451966762542725]]]
# room_data12 = [[[30.8267565705936, 1.99350908007139, 0.05783356353640556], [30.8267565705936, 1.99350908007139, 2.7638299465179443]], [[30.8371616016268, 2.78816964316300, 0.05783356353640556], [30.8371616016268, 2.78816964316300, 2.7638299465179443]], [[30.8597497753250, 4.51328999819055, 0.05783356353640556], [30.8597497753250, 4.51328999819055, 2.7638299465179443]], [[30.8472124726154, 3.55578203891438, 0.05783356353640556], [30.8472124726154, 3.55578203891438, 2.7638299465179443]]], [[[30.8267565705936, 1.99350908007139, -0.05211322009563446], [30.8267565705936, 1.99350908007139, 2.8251850605010986]], [[24.8719780145690, 2.07105127601826, -0.05211322009563446], [24.8719780145690, 2.07105127601826, 2.8251850605010986]]], [[[30.254779052734374, -0.9754120544053082, -0.022219285368919373], [30.254779052734374, -0.9961625862361354, 2.715100049972534]], [[24.588400650024415, -0.8982083675983497, -0.022219285368919373], [24.588400650024415, -0.9189588994291771, 2.715100049972534]], [[24.8352019787250, -0.901739439975345, -0.022219285368919373], [24.8352019787250, -0.901739439975345, 2.715100049972534]]], [[[31.1174747467041, 2.9516356075214167, 2.0057098865509033], [31.1174747467041, 3.014692650158374, 2.7372798919677734]], [[28.595299530029298, 3.0363441594936664, 2.0057098865509033], [28.595299530029298, 3.0994012021306236, 2.7372798919677734]], [[30.8371616016268, 2.78816964316300, 2.0057098865509033], [30.8371616016268, 2.78816964316300, 2.7372798919677734]]], [[[30.8597497753250, 4.51328999819055, 0.7461583018302917], [30.8597497753250, 4.51328999819055, 2.869724988937378]], [[26.8983440926112, 4.54796057124080, 0.7461583018302917], [26.8983440926112, 4.54796057124080, 2.869724988937378]]], [[[24.8719780145690, 2.07105127601826, -0.0019539999775588512], [24.8719780145690, 2.07105127601826, 2.7638449668884277]], [[24.8352019787250, -0.901739439975345, -0.0019539999775588512], [24.8352019787250, -0.901739439975345, 2.7638449668884277]], [[24.8780346040140, 2.56063566050365, -0.0019539999775588512], [24.8780346040140, 2.56063566050365, 2.7638449668884277]]], [[[30.90829963684082, 3.565192664101402, 0.6492810249328613], [30.90829963684082, 3.581613716512753, 1.932918667793274]], [[28.56316261291504, 3.5227855947873192, 0.6492810249328613], [28.56316261291504, 3.5392066471986703, 1.932918667793274]], [[30.8472124726154, 3.55578203891438, 0.6492810249328613], [30.8472124726154, 3.55578203891438, 1.932918667793274]]], [[[26.8983440926112, 4.54796057124080, 2.0856199264526367], [26.8983440926112, 4.54796057124080, 2.852725028991699]], [[24.8780346040140, 2.56063566050365, 2.0856199264526367], [24.8780346040140, 2.56063566050365, 2.852725028991699]]]
# room_data13 = [[[25.7177878416515, 11.0093147942772, 0.045727331191301346], [25.7177878416515, 11.0093147942772, 2.751305103302002]], [[30.9550459392183, 10.9225760326886, 0.045727331191301346], [30.9550459392183, 10.9225760326886, 2.751305103302002]], [[33.8929101899430, 10.8739195215761, 0.045727331191301346], [33.8929101899430, 10.8739195215761, 2.751305103302002]], [[33.9087800964715, 10.8736566863266, 0.045727331191301346], [33.9087800964715, 10.8736566863266, 2.751305103302002]]], [[[27.9865174769709, 14.0038621696740, -0.0426952987909317], [27.9865174769709, 14.0038621696740, 2.739729881286621]], [[25.0112939591517, 14.0410298402761, -0.0426952987909317], [25.0112939591517, 14.0410298402761, 2.739729881286621]], [[31.0130284664035, 13.9660537956626, -0.0426952987909317], [31.0130284664035, 13.9660537956626, 2.739729881286621]], [[27.5822896766717, 14.0089119434607, -0.0426952987909317], [27.5822896766717, 14.0089119434607, 2.739729881286621]], [[26.5277733660493, 14.0220853788826, -0.0426952987909317], [26.5277733660493, 14.0220853788826, 2.739729881286621]], [[29.3180739235798, 13.9872278391441, -0.0426952987909317], [29.3180739235798, 13.9872278391441, 2.739729881286621]], [[33.9344483312539, 13.9295582616038, -0.0426952987909317], [33.9344483312539, 13.9295582616038, 2.739729881286621]]], [[[27.9865174769709, 14.0038621696740, -0.046505119651556015], [27.9865174769709, 14.0038621696740, 2.746040105819702]], [[27.9823553524540, 13.5069549102768, -0.046505119651556015], [27.9823553524540, 13.5069549102768, 2.746040105819702]], [[27.9990529648571, 15.5004476046947, -0.046505119651556015], [27.9990529648571, 15.5004476046947, 2.746040105819702]], [[28.0103916583073, 16.8541502785581, -0.046505119651556015], [28.0103916583073, 16.8541502785581, 2.746040105819702]]], [[[27.9823553524540, 13.5069549102768, -0.0642472505569458], [27.9823553524540, 13.5069549102768, 2.7516698837280273]], [[25.0047316663888, 13.5602421392612, -0.0642472505569458], [25.0047316663888, 13.5602421392612, 2.7516698837280273]], [[32.8698603223947, 13.4194886539750, -0.0642472505569458], [32.8698603223947, 13.4194886539750, 2.7516698837280273]], [[27.5657284567364, 13.5144108197986, -0.0642472505569458], [27.5657284567364, 13.5144108197986, 2.7516698837280273]], [[26.0495346505372, 13.5415444589195, -0.0642472505569458], [26.0495346505372, 13.5415444589195, 2.7516698837280273]], [[29.4878276567882, 13.4800131419848, -0.0642472505569458], [29.4878276567882, 13.4800131419848, 2.7516698837280273]]], [[[25.0112939591517, 14.0410298402761, -0.056253332644701004], [25.0112939591517, 14.0410298402761, 2.8206899166107178]], [[25.0047316663888, 13.5602421392612, -0.056253332644701004], [25.0047316663888, 13.5602421392612, 2.8206899166107178]], [[24.9664581399796, 10.7561245180517, -0.056253332644701004], [24.9664581399796, 10.7561245180517, 2.8206899166107178]], [[25.0496210266155, 16.8490701576307, -0.056253332644701004], [25.0496210266155, 16.8490701576307, 2.8206899166107178]]], [[[25.7177878416515, 11.0093147942772, -0.04414144158363342], [25.7177878416515, 11.0093147942772, 2.674410104751587]], [[32.8698603223947, 13.4194886539750, -0.04414144158363342], [32.8698603223947, 13.4194886539750, 2.674410104751587]], [[24.9664581399796, 10.7561245180517, -0.04414144158363342], [24.9664581399796, 10.7561245180517, 2.674410104751587]], [[30.9905502271825, 12.7861807452615, -0.04414144158363342], [30.9905502271825, 12.7861807452615, 2.674410104751587]], [[27.5019671953720, 11.6105646349252, -0.04414144158363342], [27.5019671953720, 11.6105646349252, 2.674410104751587]], [[29.8488075397892, 12.4014253632285, -0.04414144158363342], [29.8488075397892, 12.4014253632285, 2.674410104751587]], [[25.7751351578149, 11.0286402419307, -0.04414144158363342], [25.7751351578149, 11.0286402419307, 2.674410104751587]], [[26.0581171640168, 11.1240022276976, -0.04414144158363342], [26.0581171640168, 11.1240022276976, 2.674410104751587]]], [[[30.9550459392183, 10.9225760326886, 0.008627000264823437], [30.9550459392183, 10.9225760326886, 2.8177099227905273]], [[31.0130284664035, 13.9660537956626, 0.008627000264823437], [31.0130284664035, 13.9660537956626, 2.8177099227905273]], [[30.9905502271825, 12.7861807452615, 0.008627000264823437], [30.9905502271825, 12.7861807452615, 2.8177099227905273]]], [[[27.5822896766717, 14.0089119434607, 0.5420185327529907], [27.5822896766717, 14.0089119434607, 2.6540000438690186]], [[27.5657284567364, 13.5144108197986, 0.5420185327529907], [27.5657284567364, 13.5144108197986, 2.6540000438690186]], [[27.5019671953720, 11.6105646349252, 0.5420185327529907], [27.5019671953720, 11.6105646349252, 2.6540000438690186]], [[27.6194685758570, 15.1190359255955, 0.5420185327529907], [27.6194685758570, 15.1190359255955, 2.6540000438690186]]], [[[26.5277733660493, 14.0220853788826, 1.1226298809051514], [26.5277733660493, 14.0220853788826, 2.739300012588501]], [[27.9990529648571, 15.5004476046947, 1.1226298809051514], [27.9990529648571, 15.5004476046947, 2.739300012588501]], [[26.0495346505372, 13.5415444589195, 1.1226298809051514], [26.0495346505372, 13.5415444589195, 2.739300012588501]], [[27.6194685758570, 15.1190359255955, 1.1226298809051514], [27.6194685758570, 15.1190359255955, 2.739300012588501]]], [[[29.3180739235798, 13.9872278391441, 0.1394439935684204], [29.3180739235798, 13.9872278391441, 2.63875675201416]], [[29.4878276567882, 13.4800131419848, 0.1394439935684204], [29.4878276567882, 13.4800131419848, 2.63875675201416]], [[29.8488075397892, 12.4014253632285, 0.1394439935684204], [29.8488075397892, 12.4014253632285, 2.63875675201416]]], [[[33.8929101899430, 10.8739195215761, 2.049729585647583], [33.8929101899430, 10.8739195215761, 2.7425999641418457]], [[33.9344483312539, 13.9295582616038, 2.049729585647583], [33.9344483312539, 13.9295582616038, 2.7425999641418457]]], [[[25.346126189653233, 12.306049728393555, 0.5527185201644897], [25.33628594635227, 12.306049728393555, 2.731760025024414]], [[25.923637073628306, 10.57640037536621, 0.5527185201644897], [25.91379683032734, 10.57640037536621, 2.731760025024414]], [[25.7751351578149, 11.0286402419307, 0.5527185201644897], [25.7751351578149, 11.0286402419307, 2.731760025024414]]], [[[25.652839643460055, 12.46152629852295, -0.050187498331069946], [25.610168667627086, 12.46152629852295, 2.349950075149536]], [[26.193590373568107, 10.680824851989746, -0.050187498331069946], [26.15091939773514, 10.680824851989746, 2.349950075149536]], [[26.0581171640168, 11.1240022276976, -0.050187498331069946], [26.0581171640168, 11.1240022276976, 2.349950075149536]]], [[[28.0103916583073, 16.8541502785581, 2.356266498565674], [28.0103916583073, 16.8541502785581, 2.6455488204956055]], [[25.0496210266155, 16.8490701576307, 2.356266498565674], [25.0496210266155, 16.8490701576307, 2.6455488204956055]]], [[[33.94279066602396, 12.932540321350098, 0.04730018600821495], [33.93102919771192, 12.932540321350098, 0.9010489583015442]], [[33.89774810634635, 10.25707778930664, 0.04730018600821495], [33.885986638034304, 10.25707778930664, 0.9010489583015442]], [[33.9087800964715, 10.8736566863266, 0.04730018600821495], [33.9087800964715, 10.8736566863266, 0.9010489583015442]]]
# room_data14 = [[[13.1570768852582, 23.2007178653877, -0.031745705753564835], [13.1570768852582, 23.2007178653877, 2.7190475463867188]], [[13.0754778919776, 21.4357702017533, -0.031745705753564835], [13.0754778919776, 21.4357702017533, 2.7190475463867188]], [[13.0420595882842, 20.7129480852655, -0.031745705753564835], [13.0420595882842, 20.7129480852655, 2.7190475463867188]]], [[[13.1570768852582, 23.2007178653877, -0.031463999301195145], [13.1570768852582, 23.2007178653877, 2.6703546047210693]], [[10.4946659485226, 23.2571430382146, -0.031463999301195145], [10.4946659485226, 23.2571430382146, 2.6703546047210693]], [[16.0804069420451, 23.1387629652600, -0.031463999301195145], [16.0804069420451, 23.1387629652600, 2.6703546047210693]]], [[[10.4946659485226, 23.2571430382146, -0.07134239375591278], [10.4946659485226, 23.2571430382146, 2.7063000202178955]], [[11.7092686367675, 21.4411472097809, -0.07134239375591278], [11.7092686367675, 21.4411472097809, 2.7063000202178955]], [[10.5601159179371, 23.1592864530298, -0.07134239375591278], [10.5601159179371, 23.1592864530298, 2.7063000202178955]]], [[[16.0804069420451, 23.1387629652600, -0.08989299833774567], [16.0804069420451, 23.1387629652600, 2.7222530841827393]], [[16.0089401358042, 20.6472915097352, -0.08989299833774567], [16.0089401358042, 20.6472915097352, 2.7222530841827393]]], [[[13.0754778919776, 21.4357702017533, -0.030063997954130173], [13.0754778919776, 21.4357702017533, 2.7175800800323486]], [[11.7092686367675, 21.4411472097809, -0.030063997954130173], [11.7092686367675, 21.4411472097809, 2.7175800800323486]]], [[[13.0420595882842, 20.7129480852655, 0.8426254391670227], [13.0420595882842, 20.7129480852655, 2.6448607444763184]], [[16.0089401358042, 20.6472915097352, 0.8426254391670227], [16.0089401358042, 20.6472915097352, 2.6448607444763184]]], [[[10.937154197692871, 23.126660264332003, 0.06232921779155731], [10.937154197692871, 23.18390875833965, 2.6567773818969727]], [[9.669012641906738, 23.241022005597962, 0.06232921779155731], [9.669012641906738, 23.29827049960561, 2.6567773818969727]], [[10.5601159179371, 23.1592864530298, 0.06232921779155731], [10.5601159179371, 23.1592864530298, 2.6567773818969727]]]
# #room_data15 = [[[26.9034916514965, 23.0129450122557, -0.05904700234532356], [26.9034916514965, 23.0129450122557, 2.7178094387054443]], [[28.1452797177854, 23.0015104388501, -0.05904700234532356], [28.1452797177854, 23.0015104388501, 2.7178094387054443]], [[34.0161673032327, 22.9474504129293, -0.05904700234532356], [34.0161673032327, 22.9474504129293, 2.7178094387054443]]], [[[26.9034916514965, 23.0129450122557, 0.8376811742782593], [26.9034916514965, 23.0129450122557, 2.63930082321167]], [[28.1081112804316, 21.7824379301106, 0.8376811742782593], [28.1081112804316, 21.7824379301106, 2.63930082321167]], [[26.2137895436318, 23.7174689199794, 0.8376811742782593], [26.2137895436318, 23.7174689199794, 2.63930082321167]], [[26.9692494782494, 22.9457740401229, 0.8376811742782593], [26.9692494782494, 22.9457740401229, 2.63930082321167]]], [[[25.186384048428028, 26.233467483520506, -0.061205122619867325], [25.34050513054868, 26.233467483520506, 2.404982089996338]], [[25.05416521574467, 21.72030029296875, -0.061205122619867325], [25.208286297865325, 21.72030029296875, 2.404982089996338]]], [[[28.1452797177854, 23.0015104388501, 0.34179699420928955], [28.1452797177854, 23.0015104388501, 2.6521499156951904]], [[28.1081112804316, 21.7824379301106, 0.34179699420928955], [28.1081112804316, 21.7824379301106, 2.6521499156951904]]], [[[27.259577178955077, 20.28544791429978, 0.7523660063743591], [27.259577178955077, 20.284030657772185, 2.079740047454834]], [[24.990899658203126, 20.584300052746695, 0.7523660063743591], [24.990899658203126, 20.5828827962191, 2.079740047454834]]], [[[34.24466552734375, 20.001549609437976, 2.2487571239471436], [34.24466552734375, 19.96641995382412, 2.6413021087646484]], [[28.6406608581543, 20.033981660983706, 2.2487571239471436], [28.6406608581543, 19.99885200536985, 2.6413021087646484]], [[33.9872579301630, 20.2042851903607, 2.2487571239471436], [33.9872579301630, 20.2042851903607, 2.6413021087646484]]], [[[34.0161673032327, 22.9474504129293, -0.030590267851948738], [34.0161673032327, 22.9474504129293, 2.663670063018799]], [[33.9872579301630, 20.2042851903607, -0.030590267851948738], [33.9872579301630, 20.2042851903607, 2.663670063018799]]], [[[26.150457090376246, 26.240078353881835, 2.5570900440216064], [26.118687303592743, 26.240078353881835, 3.56052827835083]], [[26.12328781157791, 22.351955032348634, 2.5570900440216064], [26.091518024794407, 22.351955032348634, 3.56052827835083]], [[26.2137895436318, 23.7174689199794, 2.5570900440216064], [26.2137895436318, 23.7174689199794, 3.56052827835083]]], [[[26.978914488991293, 25.612799072265624, 1.128638505935669], [26.98588919476954, 25.612799072265624, 2.4074459075927734]], [[26.974981887368457, 22.62410125732422, 1.128638505935669], [26.981956593146705, 22.62410125732422, 2.4074459075927734]], [[26.9692494782494, 22.9457740401229, 1.128638505935669], [26.9692494782494, 22.9457740401229, 2.4074459075927734]]]
# #room_data15 = [[[26.9034916514965, 23.0129450122557, -0.05904700234532356], [26.9034916514965, 23.0129450122557, 2.7178094387054443]], [[28.1452797177854, 23.0015104388501, -0.05904700234532356], [28.1452797177854, 23.0015104388501, 2.7178094387054443]], [[34.0161673032327, 22.9474504129293, -0.05904700234532356], [34.0161673032327, 22.9474504129293, 2.7178094387054443]]], [[[26.9034916514965, 23.0129450122557, 0.8376811742782593], [26.9034916514965, 23.0129450122557, 2.63930082321167]], [[28.1081112804316, 21.7824379301106, 0.8376811742782593], [28.1081112804316, 21.7824379301106, 2.63930082321167]], [[26.2137895436318, 23.7174689199794, 0.8376811742782593], [26.2137895436318, 23.7174689199794, 2.63930082321167]], [[26.9692494782494, 22.9457740401229, 0.8376811742782593], [26.9692494782494, 22.9457740401229, 2.63930082321167]]], [[[25.186384048428028, 26.233467483520506, -0.061205122619867325], [25.34050513054868, 26.233467483520506, 2.404982089996338]], [[25.05416521574467, 21.72030029296875, -0.061205122619867325], [25.208286297865325, 21.72030029296875, 2.404982089996338]]], [[[28.1452797177854, 23.0015104388501, 0.34179699420928955], [28.1452797177854, 23.0015104388501, 2.6521499156951904]], [[28.1081112804316, 21.7824379301106, 0.34179699420928955], [28.1081112804316, 21.7824379301106, 2.6521499156951904]]], [[[27.259577178955077, 20.28544791429978, 0.7523660063743591], [27.259577178955077, 20.284030657772185, 2.079740047454834]], [[24.990899658203126, 20.584300052746695, 0.7523660063743591], [24.990899658203126, 20.5828827962191, 2.079740047454834]]], [[[34.24466552734375, 20.001549609437976, 2.2487571239471436], [34.24466552734375, 19.96641995382412, 2.6413021087646484]], [[28.6406608581543, 20.033981660983706, 2.2487571239471436], [28.6406608581543, 19.99885200536985, 2.6413021087646484]], [[33.9872579301630, 20.2042851903607, 2.2487571239471436], [33.9872579301630, 20.2042851903607, 2.6413021087646484]]], [[[34.0161673032327, 22.9474504129293, -0.030590267851948738], [34.0161673032327, 22.9474504129293, 2.663670063018799]], [[33.9872579301630, 20.2042851903607, -0.030590267851948738], [33.9872579301630, 20.2042851903607, 2.663670063018799]]], [[[26.150457090376246, 26.240078353881835, 2.5570900440216064], [26.118687303592743, 26.240078353881835, 3.56052827835083]], [[26.12328781157791, 22.351955032348634, 2.5570900440216064], [26.091518024794407, 22.351955032348634, 3.56052827835083]], [[26.2137895436318, 23.7174689199794, 2.5570900440216064], [26.2137895436318, 23.7174689199794, 3.56052827835083]]], [[[26.978914488991293, 25.612799072265624, 1.128638505935669], [26.98588919476954, 25.612799072265624, 2.4074459075927734]], [[26.974981887368457, 22.62410125732422, 1.128638505935669], [26.981956593146705, 22.62410125732422, 2.4074459075927734]], [[26.9692494782494, 22.9457740401229, 1.128638505935669], [26.9692494782494, 22.9457740401229, 2.4074459075927734]]]
#
# a = MakingGraph(room_data14)
# a.make_first_graph()
# #3

#
# ''' make edges'''
# all_lines = reduce(lambda x, y: x+y,new_line_info)
# # atomic_lines = list(set(map(tuple, all_lines)))
# atomic_lines = []
# for each_line_v in all_lines:
#     if each_line_v not in atomic_lines:
#         atomic_lines.append(each_line_v)
# print all_lines
# print atomic_lines
# r_s = rs.Point_sort()
# new_line_info = [
#     [[0,6],[3,6]],
#     [[3,6],[6,6]],
#
#     [[6,3],[6,6]],
#     [[6,3],[6,0]],
#
#     [[6,0],[0,0]],
#
#     [[0,0],[0,6]],
#
#     [[3,6],[3,3]],
#     [[3,3],[6,3]],
#
#     [[2,7],[2,5]],
#     [[1,4],[1,3]]
#
# ]
# all_lines = reduce(lambda x, y: x+y,new_line_info)
# atomic_lines = list(set(map(tuple, all_lines)))
# print atomic_lines
# used_l = []
# wall_graph = []
# for atomic_i in range(len(atomic_lines)):
#     atomic_v = [atomic_lines[atomic_i][0], atomic_lines[atomic_i][1]]
#     print atomic_v
#     for l in range(len(new_line_info)):
#         if l not in used_l:
#             if atomic_v in new_line_info[l]:
#                 index = new_line_info[l].index(atomic_v)
#                 print index
#                 if index == 0:
#                     v_i = atomic_lines.index(tuple(new_line_info[l][1]))
#                     wall_graph.append([atomic_i, v_i])
#                 else:
#                     v_i = atomic_lines.index(tuple(new_line_info[l][0]))
#                     wall_graph.append([v_i, atomic_i])
#                 used_l.append(l)
#
# print used_l
# print wall_graph
# # #
# G = nx.Graph()
# G.add_edges_from(wall_graph)
# nx.draw(G)
# plt.show()
# cycles_list = nx.minimum_cycle_basis(G)
# print cycles_list
# for i in cycles_list:
#     a = []
#     for a_i in i:
#         a.append([atomic_lines[a_i][0],atomic_lines[a_i][1]])
#     print a
#     r_s.visual_graph(r_s.SortPointsClockwise2(a, True))
#
# if len(cycles_list) > 1:
#     delete_edges = []
#     temp_delete = []
#
#     for each_cycle in cycles_list:
#         for each_cycle_i in range(len(each_cycle) - 1):
#             for wall_node in wall_graph:
#                 if each_cycle[each_cycle_i] in wall_node:
#                     index_node = wall_node.index(each_cycle[each_cycle_i])
#                     for each_cycle_j in range(each_cycle_i + 1, len(each_cycle)):
#                         if each_cycle[each_cycle_j] in wall_node:
#                             if index_node == 0:
#                                 temp_edge = [each_cycle[each_cycle_i], each_cycle[each_cycle_j]]
#                             else:
#                                 temp_edge = [each_cycle[each_cycle_j], each_cycle[each_cycle_i]]
#
#                             temp_delete.append(temp_edge)
#     delete_dup_edges = list(set(map(tuple, temp_delete)))
#
#     for delete_edge in delete_dup_edges:
#         if temp_delete.count([delete_edge[0], delete_edge[1]]) > 1:
#             delete_edges.append([delete_edge[0], delete_edge[1]])
#
#     # print wall_graph
#     print "delete_edges", delete_edges
#
#     G.remove_edges_from(delete_edges)
#     new_cycles = nx.cycle_basis(G)
#     nx.draw(G)
#     plt.show()
#     print new_cycles
# else:
#     if len(cycles_list[0]) != 0:
#         new_cycles = cycles_list
#
# test_point = []
# for cycle_l in new_cycles:
#     if len(cycle_l) > 1:
#         cycle_point_list = []
#         print cycle_l
#         for cycle_node in cycle_l:
#             cycle_point_list.append([atomic_lines[cycle_node][0], atomic_lines[cycle_node][1]])
#             test_point.append([atomic_lines[cycle_node][0], atomic_lines[cycle_node][1]])
#
#         print cycle_point_list
#
#         sorted_c_point = r_s.SortPointsClockwise(cycle_point_list, True)
#         r_s.visual_graph(sorted_c_point)

#         ceiling = []
#         floor = []
#         wall = []
#         for each_point in sorted_c_point:
#
#             ceiling.append([each_point[0], each_point[1], 3.0])
#             floor.append([each_point[0], each_point[1], 0.0])
#         for each_i in range(len(ceiling) -1):
#             each_wall = []
#             each_wall.append(ceiling[each_i])
#             each_wall.append(floor[each_i])
#             each_wall.append(floor[each_i + 1])
#             each_wall.append(ceiling[each_i + 1])
#             each_wall.append(ceiling[each_i])
#             wall.append(each_wall)

        # make_gml_file2 = gml.PointCloudToCityGML([ceiling], [floor], wall, [], [])
        # make_gml_file2.MakeRoomObject()

# testa = r_s.SortPointsClockwise2(test_point,True)
# r_s.visual_graph(testa)




# root/pgadmin4 source pgadmin4
# Delete from citydb.opening_to_them_surface;
# Delete from citydb.thematic_surface;
# Delete from citydb.address_to_building;
# Delete from citydb.building_furniture;
# Delete from citydb.building_installation;
# Delete from citydb.room;
# Delete from citydb.building;
# Delete from citydb.opening;
# Delete from citydb.surface_geometry;
# Delete from citydb.cityobject_genericattrib;
# Delete from citydb.cityobject;
# Delete from citydb.appear_to_surface_data;
# Delete from citydb.surface_data;
# Delete from citydb.tex_image;
# Delete from citydb.appearance;
# Delete from citydb.address;
#
# ALTER SEQUENCE address_seq RESTART WITH 1;
# ALTER SEQUENCE ade_seq RESTART WITH 1;
# ALTER SEQUENCE appearance_seq RESTART WITH 1;
# ALTER SEQUENCE citymodel_seq RESTART WITH 1;
# ALTER SEQUENCE cityobject_genericatt_seq RESTART WITH 1;
# ALTER SEQUENCE cityobject_seq RESTART WITH 1;
# ALTER SEQUENCE external_ref_seq RESTART WITH 1;
# ALTER SEQUENCE grid_coverage_seq RESTART WITH 1;
# ALTER SEQUENCE implicit_geometry_seq RESTART WITH 1;
# ALTER SEQUENCE index_table_id_seq RESTART WITH 1;
# ALTER SEQUENCE schema_seq RESTART WITH 1;
# ALTER SEQUENCE surface_data_seq RESTART WITH 1;
# ALTER SEQUENCE surface_geometry_seq RESTART WITH 1;
# ALTER SEQUENCE tex_image_seq RESTART WITH 1;























# import Point_sort as rs
# import networkx as nx
# import matplotlib.pyplot as plt
# from functools import reduce
# import operator
# import math
# import src.citygml.PointCloud_To_CityGML as gml
#
#
# class MakingGraph:
#
#     def __init__(self, surface_list):
#
#         self.new_line_info = []
#         self.surface_info = surface_list
#         self.r_s = rs.Point_sort()
#         self.atomic_lines = []
#     def make_line_info(self):
#
#
#         for each_wall in self.surface_info:
#             merge_line_info = []
#             each_line_info = []
#
#             for wall_point in each_wall:
#
#                 if wall_point[0][:2] not in merge_line_info:
#                     merge_line_info.append(wall_point[0][:2])
#
#             if len(merge_line_info) != 0:
#
#                 # center = tuple(
#                 #     map(operator.truediv, reduce(lambda x, y: map(operator.add, x, y), merge_line_info), [len(merge_line_info)] * 2))
#                 # sorted_new_line_info = (sorted(merge_line_info, key=lambda coord: (-135 - math.degrees(
#                 #     math.atan2(*tuple(map(operator.sub, coord, center))[::-1]))) % 360))
#                 sorted_new_line_info = self.sorted2Dpoints(merge_line_info)
#                 for sorted_i in range(len(sorted_new_line_info) - 1):
#                     temp_list = []
#                     n = sorted_new_line_info[sorted_i]
#                     n_1 = sorted_new_line_info[sorted_i + 1]
#                     if n != n_1:
#                         temp_list.append(n)
#                         temp_list.append(n_1)
#                         each_line_info.append(temp_list)
#                 if len(each_wall) == 3:
#                     print each_wall
#                     print sorted_new_line_info
#                     print
#                 self.new_line_info.extend(each_line_info)
#
#     def make_edge_info(self):
#         all_lines = reduce(lambda x, y: x+y,self.new_line_info)
#         # self.atomic_lines = list(set(map(tuple, all_lines)))
#         for each_line in all_lines:
#             if each_line not in self.atomic_lines:
#                 self.atomic_lines.append(each_line)
#
#         used_l = []
#         wall_graph = []
#         for atomic_i in range(len(self.atomic_lines)):
#             atomic_v = [self.atomic_lines[atomic_i][0], self.atomic_lines[atomic_i][1]]
#
#             for l in range(len(self.new_line_info)):
#                 if l not in used_l:
#                     if atomic_v in self.new_line_info[l]:
#                         index = self.new_line_info[l].index(atomic_v)
#
#                         if index == 0:
#                             v_i = self.atomic_lines.index(self.new_line_info[l][1])
#                             # v_i = self.atomic_lines.index(tuple(self.new_line_info[l][1]))
#                             wall_graph.append([atomic_i, v_i])
#                         else:
#                             v_i = self.atomic_lines.index(self.new_line_info[l][0])
#                             # v_i = self.atomic_lines.index(tuple(self.new_line_info[l][0]))
#                             wall_graph.append([v_i, atomic_i])
#                         print atomic_i,  v_i, self.new_line_info[l]
#                         used_l.append(l)
#         print wall_graph
#         # self.r_s.visual_graph2(self.atomic_lines)
#         return used_l, wall_graph
#
#     def make_first_graph(self):
#         self.make_line_info()
#         used_l, wall_graph = self.make_edge_info()
#         G = nx.Graph()
#         G.add_edges_from(wall_graph)
#         nx.draw(G)
#         plt.show()
#         cycles_list = nx.minimum_cycle_basis(G)
#
#         print cycles_list
#         for i in cycles_list:
#             a = []
#             for a_i in i:
#                 a.append([self.atomic_lines[a_i][0],self.atomic_lines[a_i][1]])
#             # self.r_s.visual_graph2(self.r_s.SortPointsClockwise2(a, True))
#
#         if len(cycles_list) > 1:
#             delete_edges = []
#             temp_delete = []
#
#             for each_cycle in cycles_list:
#                 for each_cycle_i in range(len(each_cycle) - 1):
#                     for wall_node in wall_graph:
#                         if each_cycle[each_cycle_i] in wall_node:
#                             index_node = wall_node.index(each_cycle[each_cycle_i])
#                             for each_cycle_j in range(each_cycle_i + 1, len(each_cycle)):
#                                 if each_cycle[each_cycle_j] in wall_node:
#                                     if index_node == 0:
#                                         temp_edge = [each_cycle[each_cycle_i], each_cycle[each_cycle_j]]
#                                     else:
#                                         temp_edge = [each_cycle[each_cycle_j], each_cycle[each_cycle_i]]
#
#                                     temp_delete.append(temp_edge)
#             delete_dup_edges = list(set(map(tuple, temp_delete)))
#
#             for delete_edge in delete_dup_edges:
#                 if temp_delete.count([delete_edge[0], delete_edge[1]]) > 1:
#                     delete_edges.append([delete_edge[0], delete_edge[1]])
#
#             # print wall_graph
#             print "delete_edges", delete_edges
#
#             G.remove_edges_from(delete_edges)
#             new_cycles = nx.minimum_cycle_basis(G)
#             nx.draw(G)
#             plt.show()
#             print new_cycles
#
#         else:
#             if len(cycles_list[0]) != 0:
#                 new_cycles = cycles_list
#         test_point = []
#         for cycle_l in new_cycles:
#             if len(cycle_l) > 1:
#                 cycle_point_list = []
#                 print cycle_l
#                 temp_list_l = []
#                 for cycle_node in cycle_l:
#                     for test_i in nx.edges(G, cycle_node):
#                         temp_list_l.append([test_i[0], test_i[1]])
#                     cycle_point_list.append([self.atomic_lines[cycle_node][0], self.atomic_lines[cycle_node][1]])
#                     test_point.append([self.atomic_lines[cycle_node][0], self.atomic_lines[cycle_node][1]])
#
#                 print cycle_point_list
#                 print temp_list_l
#                 used_index = []
#                 for t_i in range(len(temp_list_l)-1):
#                     for t_j in range(1+t_i, len(temp_list_l)):
#                         if temp_list_l[t_i][0] in temp_list_l[t_j]:
#                             if temp_list_l[t_i][1] in temp_list_l[t_j]:
#                                 used_index.append(t_j)
#                 print used_index
#                 new_list = []
#                 for t_k in range(len(temp_list_l)):
#                     if t_k not in used_index:
#                         if temp_list_l[t_k][0] in cycle_l:
#                             if temp_list_l[t_k][1] in cycle_l:
#                                 new_list.append(temp_list_l[t_k])
#                 print new_list
#                 wall_point_list = []
#                 start_node = new_list[0]
#                 new_list.pop(0)
#                 first_check = True
#                 # while True:
#
#                 right = start_node[1]
#                 left = start_node[0]
#                 while True:
#                     used_index = []
#                     for i in new_list:
#                         if right in i:
#                             if i.index(right) == 0:
#                                 right = i[1]
#                             else:
#                                 right = i[0]
#                             start_node.append(right)
#                             used_index.append(new_list.index(i))
#                             continue
#                         if left in i:
#                             if i.index(left) == 0:
#                                 left = i[1]
#                             else:
#                                 left = i[0]
#                             start_node.insert(0, left)
#                             used_index.append(new_list.index(i))
#                             continue
#                     new_list2 = []
#                     if len(used_index) == len(new_list):
#                         break
#                     for j in range(len(new_list)):
#                         if j not in used_index:
#                             new_list2.append(new_list[j])
#                     new_list = new_list2
#
#                 print start_node
#
#                 ceiling = []
#                 floor = []
#                 wall = []
#                 for each_point in start_node:
#
#                     ceiling.append([self.atomic_lines[each_point][0], self.atomic_lines[each_point][1], 3.0])
#                     floor.append([self.atomic_lines[each_point][0], self.atomic_lines[each_point][1], 0.0])
#                     self.r_s.visual_graph2(ceiling)
#                 for each_i in range(len(ceiling) -1):
#                     each_wall = []
#                     each_wall.append(ceiling[each_i])
#                     each_wall.append(floor[each_i])
#                     each_wall.append(floor[each_i + 1])
#                     each_wall.append(ceiling[each_i + 1])
#                     each_wall.append(ceiling[each_i])
#                     wall.append(each_wall)
#                     # self.r_s.visual_graph(each_wall)
#                 make_gml_file2 = gml.PointCloudToCityGML([ceiling], [floor], wall, [], [])
#                 make_gml_file2.MakeRoomObject()
#
#     def sorted2Dpoints(self, point_list):
#         max = -1.0
#         index = []
#         sorted_list = []
#         for i in range(len(point_list) - 1):
#             for j in range(1, len(point_list)):
#                 distance = math.sqrt(
#                     ((point_list[i][0] - point_list[j][0]) ** 2) + ((point_list[i][1] - point_list[j][1]) ** 2))
#                 if distance > max:
#                     max = distance
#                     index = []
#                     index.append(i)
#                     index.append(j)
#         value0 = point_list[index[0]]
#         value1 = point_list[index[1]]
#         if index[0] < index[1]:
#             point_list.pop(index[0])
#             point_list.pop(index[1] - 1)
#         else:
#             point_list.pop(index[1])
#             point_list.pop(index[0])
#
#         sorted_list.append(value0)
#         sorted_list.append(value1)
#         while True:
#             if len(point_list) == 0:
#                 break
#             min = float("inf")
#             index = -1
#             for i in range(len(point_list)):
#                 distance = math.sqrt(
#                     ((sorted_list[0][0] - point_list[i][0]) ** 2) + ((sorted_list[0][1] - point_list[i][1]) ** 2))
#                 if distance < min:
#                     min = distance
#                     index = i
#                 print min, index
#             sorted_list.insert(len(sorted_list) - 1, point_list[index])
#             point_list.pop(index)
#
#         return sorted_list